<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Google Style Guides</title><link>https://gocn.github.io/styleguide/docs/</link><description>Recent content in Docs on Google Style Guides</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://gocn.github.io/styleguide/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://gocn.github.io/styleguide/docs/01-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/01-overview/</guid><description>Go Style # 原文：https://google.github.io/styleguide/go
概述 | 指南 | 决策 | 最佳实践
关于 # 本文的 Go 风格指南和文档整理了当前编写可读和惯用的 Go 最佳方法。 遵守风格指南并不是绝对的，这份文件也永远不会详尽无遗。我们的目的是尽量减少编写可读 Go 代码的猜测，以便该语言的新手可以避免常见的错误。此风格指南也用于统一 Google 内 Go 代码review人的风格指南。
文档 链接 主要受众 规范性(Normative) 规范(Canonical) 风格指南 https://google.github.io/styleguide/go/guide 所有人 Yes Yes 风格决策 https://google.github.io/styleguide/go/decisions 可读性导师 Yes No 最佳实践 https://google.github.io/styleguide/go/best-practices 任何有兴趣的人 No No 文档说明 # 风格指南(Style Guide) (https://google.github.io/styleguide/go/guide) 概述了 Google Go 风格的基础。本文档是权威的，用作风格决策和最佳实践中建议的基础。
风格决策(Style Decisions) (https://google.github.io/styleguide/go/decisions) 是一份更详细的文档，它总结了关于特定风格点的决策，并在适当的时候讨论了决策背后的原因。
这些决定可能偶尔会根据新数据、新语言特性、新库或新出现的模式而改变，但不希望谷歌的个别 Go 程序员应该时刻关注本文档的同步更新。
最佳实践(Best Practices) (https://google.github.io/styleguide/go/best-practices) 描述了一些随时间演变的模式，这些模式可以解决通用问题，可读性强，并且对代码可维护的需要有很好的健壮性。
这些最佳实践并不规范，但鼓励谷歌的Go程序员尽可能使用它们，以保持代码库的统一和一致。
这些文件旨在:
就权衡备选风格的一套原则达成一致 编撰最终的 Go 风格 记录并提供Go习语的典型示例 记录各种风格决策的利弊 帮助减少Go可读性review中的意外 帮助可读性导师使用一致的术语和指导 本文档不是旨在：</description></item><item><title/><link>https://gocn.github.io/styleguide/docs/02-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gocn.github.io/styleguide/docs/02-guide/</guid><description>Go 编程规范 # 风格原则 # 以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序：
清晰：代码的目的和理由对读者来说是清楚的。 简单：代码以最简洁的方式完成了它的目的。 简约：代码具有很高的信噪比。 可维护：代码可以很容易地维护。 一致：代码与更广泛的谷歌代码库一致。 清晰 # 可读性的核心目标是写出对读者来说很清晰的代码。
清晰性主要是通过有效的命名、有用的注释和有效的代码组织来实现的。
清晰性要从读者的角度来看，而不是从代码的作者的角度来看，代码的易读性比易写性更重要。代码的清晰性有两个不同的方面：
该代码实际上在做什么？ 为什么代码会这么做？ 该代码实际上在做什么 # Go 的设计是可以比较直接地看到代码在做什么。在比较未知的或者读者可能需要先验知识才能理解代码的情况下，我们值得投入时间以使代码的目的对未来的读者更加明确。例如，它可能有助于：
使用更具描述性的变量名称 添加额外的评论 使用空白与注释来划分代码 将代码重构为独立的函数/方法，使其更加模块化 这里没有一个放之四海而皆准的方法，但在开发 Go 代码时，优先考虑清晰性是很重要的。
为什么代码会这么做 # 代码的基本原理通常由变量、函数、方法或包的名称充分传达。如果不是这样，添加注释是很重要的。当代码中包含读者可能不熟悉的细节时，“为什么？”就显得尤为重要，例如：
编程语言中的细微差别，例如，一个闭包将捕获一个循环变量，但闭包在许多行之外 业务逻辑的细微差别，例如，需要区分实际用户和虚假用户的访问控制检查 一个 API 可能需要小心翼翼才能正确使用。例如，由于性能原因，一段代码可能错综复杂，难以理解，或者一连串复杂的数学运算可能以一种意想不到的方式使用类型转换。在这些以及更多的情况下，附带的注释和文档对这些方面进行解释是很重要的，这样未来的维护者就不会犯错，读者也可以理解代码而不需要进行逆向工程。
同样重要的是，我们要意识到，一些基于清晰性考虑的尝试（如添加额外的注释）实际上会通过增加杂乱无章的内容、重述代码已经说过的内容、与代码相矛盾或增加维护负担以保持注释的最新性来掩盖代码的目的。让代码自己说话（例如，通过代码中的名称本身进行描述），而不是添加多余的注释。通常情况下，注释最好是解释为什么要做某事，而不是解释代码在做什么。
谷歌的代码库基本上是统一和一致的。通常情况下，那些比较突兀的代码（例如，应用一个不熟悉的模式）是基于充分的理由，通常是为了性能。保持这种特性很重要，可以让读者在阅读一段新的代码时清楚地知道他们应该把注意力放在哪里。
标准库中包含了许多这一原则发挥作用的例子。例如：
在 package sort 中的维护者注释 好的同一软件包中可运行的例子，这对用户（他们会查看 godoc）和维护者（他们作为测试的一部分运行）都有利 strings.Cut 只有四行代码，但它们提高了callsites 的清晰性和正确性 简单 # 你的 Go 代码对于使用、阅读和维护它的人来说应该是简单的。
Go 代码应该以最简单的方式编写，在行为和性能方面都能实现其目标。在 Google Go 代码库中，简单的代码：
从头至尾都易于阅读 不预设你已经知道它在做什么 不预设你能记住前面所有的代码 不含非必要的抽象层次 不含过于通用的命名 让读者清楚地了解到传值与决定的传播情况 有注释，解释为什么，而不是代码正在做什么，以避免未来的歧义 有独立的文档 包含有效的错误与失败用例测试 往往不是看起来“聪明”的代码 在代码的简单性和 API 使用的简单性之间可能会需要权衡。例如，让代码更复杂可能是值得的，这样 API 的终端用户可以更容易地正确调用 API。相反，把一些额外的工作留给 API 的终端用户也是值得的，这样代码就会保持简单和容易理解。</description></item></channel></rss>