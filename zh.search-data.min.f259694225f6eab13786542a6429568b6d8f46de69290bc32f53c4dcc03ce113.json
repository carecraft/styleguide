[{"id":0,"href":"/styleguide/docs/01-overview/","title":"01 Overview","section":"Docs","content":" Go Style # 原文：https://google.github.io/styleguide/go\n概述 | 指南 | 决策 | 最佳实践\n关于 # 本系列的 Go 风格指南和相关文档整理了当前，最佳的一个编写易读和惯用方式的 Go 写法。 遵守风格指南并不是绝对的，这份文件也永远不会详尽无遗。我们的目的是尽量减少编写可读 Go 代码的猜测，以便该语言的新手可以避免常见的错误。此风格指南也用于统一 Google 内 Go 代码 review 者的风格指南。\n文档 链接 主要受众 视为标准(Normative) 视为规范(Canonical) 风格指南 https://google.github.io/styleguide/go/guide 所有人 Yes Yes 风格决策 https://google.github.io/styleguide/go/decisions 可读性导师 Yes No 最佳实践 https://google.github.io/styleguide/go/best-practices 任何有兴趣的人 No No 文档说明 # 风格指南(Style Guide) (https://google.github.io/styleguide/go/guide) 概述了 Google Go 风格的基础。本文档为定义名词性质的文件，用作风格决策和最佳实践中建议的基础。\n风格决策(Style Decisions) (https://google.github.io/styleguide/go/decisions) 是一份更详细的文档，它总结了特定场景下风格的决策理由，并在适当的时候讨论了决策背后的原因。\n这些决定可能偶尔会根据新数据、新语言特性、新代码库或新出现的模式而改变，但不期望 Google 的 Go 程序员能及时了解本文档的更新。\n最佳实践(Best Practices) (https://google.github.io/styleguide/go/best-practices) 描述了一些随时间演变的模式，这些模式可以解决通用问题，可读性强，并且对代码可维护的需要有很好的健壮性。\n这些最佳实践并不规范，但鼓励 Google 的 Go 程序员尽可能使用它们，以保持代码库的统一和一致。\n这些文件旨在:\n就权衡备选风格的一套原则达成一致 整理最终的 Go 编码风格 记录并提供 Go 编码惯用法的典型示例 记录各种风格决策的利弊 帮助减少在 Go 可读性 review 时的意外 帮助可读性导师使用一致的术语和指导 本文档无意于：\n成为在可读性审查时的详尽的意见清单 列出所有的规则，期望每个人在任何时候都能记住并遵守 在语言特型和风格的使用上取代良好的判断力 为了消除风格差异，证明大规模的改变是合理的 不同 Go 程序员之间以及不同团队的代码库之间总会存在差异。然而，我们的代码库尽可能保持一致符合 Google 和 Alphabet 的最大利益。 （有关一致性的更多信息，请参阅 指南。）为此，您可以随意进行风格改进，但不需要挑剔你发现的每一个违反风格指南的行为。特别是，这些文档可能会随着时间的推移而改变，这不是导致现有代码库做出额外改动的理由； 使用最新的最佳实践编写新代码，并随着时间的推移解决上下文或者关联到的代码的问题就足够了。\n重要的是要认识到风格问题本质上是个人的，并且总是带有特定的权衡。这些文档中的大部分指南都是主观的，但就像 gofmt 一样，它提供的一致性具有重要价值。 因此，风格建议不会在未经适当讨论的情况下改变，Google 的 Go 程序员被鼓励遵循风格指南，即使他们可能不同意。\n定义 # 风格文档中使用的以下词语定义如下：\n规范(Canonical): 制定规定性和持久性规则\n在这些文档中，“规范”用于描述被认为是所有代码（旧的和新的）都应该遵循的标准，并且预计不会随着时间的推移而发生重大变化。规范文档中的原则应该被作者和审稿人理解，因此规范文档中包含的所有内容都必须达到高标准。 如此一来，与非规范文档相比，规范文档通常更短并且规定的风格元素更少。\nhttps://google.github.io/styleguide/go#canonical\n标准(Normative): 旨在建立一致性\n在这些文档中，“规范”用于描述 Go 代码审查者使用的一致同意的风格元素，以便建议、术语和理由保持一致。 这些元素可能会随着时间的推移而发生变化，本文涉及的这些文件将反映出这些变化，以便审阅者可以保持一致和及时更新。 Go 代码编写者不被要求熟悉此文档，但这些文档将经常被审阅者用作可读性审查的参考。\nhttps://google.github.io/styleguide/go#normative\n惯用写法(Idiomatic): 常见且熟悉\n在这些文档中，“惯用写法”指在 Go 代码中普遍存在的东西，并已成为一种易于识别的常见写法。一般来说，如果两者在上下文中服务于相同的目的，那么惯用写法应该优先于非惯用写法，因为这将是读者最熟悉的写法。\nhttps://google.github.io/styleguide/go#idiomatic\n附加参考 # 本指南假定读者熟悉 Effective Go，因为它为整个 Go 社区的 Go 代码提供了一个通用基线。\n下面是一些额外的资源，供那些希望自学 Go 风格的人和希望在他们的评审中附上可链接的评审依据的代码审阅者。 不期望Go 可读性过程的参与者熟悉这些资源，但它们可能作为可读性审阅的相关依据出现。\n外部参考\nGo 语言规范 Go FAQ Go 内存模型 Go 数据结构 Go 接口 Go 谚语 Go 技巧 - 敬请期待 马桶测试(Testing-on-the-Toilet) 相关文档\n厕所里的测试（又称 TotT）是测试小组最明显的成就。从2006年开始，TotT 从一个会议上的玩笑开始，已经成为一个真正的谷歌机构，并且是在公司内部传播想法、产生讨论和推动新的内部工具采用的最有效的方式之一。TotT\nTotT: 标识命令 TotT: 测试状态与 vs Testing Interactions TotT: 有效测试 TotT: 风险驱动测试 TotT: 变化检测器测试被认为是有害的 额外的外部文档\nGo 与 教条 少即是成倍的多 Esmerelda 的想象力 用于解析的正则表达式 Gofmt 的风格没有人喜欢，但 Gofmt 却是每个人的最爱 (YouTube) "},{"id":1,"href":"/styleguide/docs/02-guide/","title":"02 Guide","section":"Docs","content":" Go 编程规范 # 风格原则 # 以下几条总体原则总结了如何编写可读的 Go 代码。以下为具有可读性的代码特征，按重要性排序：\n清晰：代码的目的和设计原理对读者来说是清楚的。 简约：代码以最简单的方式来完成它的目的。 简洁：代码具有很高的信噪比，即写出来的代码是有意义的，非可有可无的。 可维护：代码可以很容易地被维护。 一致：代码与更广泛的 Google 代码库一致。 清晰 # 可读性的核心目标是写出对读者来说很清晰的代码。\n清晰性主要是通过有效的命名、有用的注释和有效的代码组织来实现的。\n清晰性要从读者的角度来看，而不是从代码的作者的角度来看，代码的易读性比易写性更重要。代码的清晰性有两个不同的方面：\n该代码实际上在做什么？ 为什么代码会这么做？ 该代码实际上在做什么 # Go 被设计得应该是可以比较直接地看到代码在做什么。在不确定的情况下或者读者可能需要先验知识才能理解代码的情况下，我们值得投入时间以使代码的目的对未来的读者更加明确。例如，它可能有助于：\n使用更具描述性的变量名称 添加额外的评论 使用空白与注释来划分代码 将代码重构为独立的函数/方法，使其更加模块化 这里没有一个放之四海而皆准的方法，但在开发 Go 代码时，优先考虑清晰性是很重要的。\n为什么代码会这么做 # 代码的基本原理通常由变量、函数、方法或包的名称充分传达。如果不是这样，添加注释是很重要的。当代码中包含读者可能不熟悉的细节时，“为什么？”就显得尤为重要，例如：\n编程语言中的细微差别，例如，一个闭包将捕获一个循环变量，但闭包在许多行之外 业务逻辑的细微差别，例如，需要区分实际用户和虚假用户的访问控制检查 一个 API 可能需要小心翼翼才能正确使用。例如，由于性能原因，一段代码可能错综复杂，难以理解，或者一连串复杂的数学运算可能以一种意想不到的方式使用类型转换。在这些以及更多的情况下，附带的注释和文档对这些方面进行解释是很重要的，这样未来的维护者就不会犯错，读者也可以理解代码而不需要进行逆向工程。\n同样重要的是，我们要意识到，一些基于清晰性考虑的尝试（如添加额外的注释），实际上会通过增加杂乱无章的内容、重述代码已经说过的内容、与代码相矛盾或增加维护负担来保持注释的最新性，以此来掩盖代码的目的。让代码自己说话（例如，通过代码中的名称本身进行描述），而不是添加多余的注释。通常情况下，注释最好是解释为什么要做某事，而不是解释代码在做什么。\nGoogle 的代码库基本上是统一和一致的。通常情况下，那些比较突兀的代码（例如，应用一个不熟悉的模式）是基于充分的理由，通常是为了性能。保持这种特性很重要，可以让读者在阅读一段新的代码时清楚地知道他们应该把注意力放在哪里。\n标准库中包含了许多这一原则发挥作用的例子。例如：\n在 package sort 中的维护者注释 好的同一软件包中可运行的例子，这对用户（他们会查看 godoc）和维护者（他们作为测试的一部分运行）都有利 strings.Cut 只有四行代码，但它们提高了callsites 的清晰性和正确性 简单 # 你的 Go 代码对于使用、阅读和维护它的人来说应该是简单的。\nGo 代码应该以最简单的方式编写，在行为和性能方面都能实现其目标。在 Google Go 代码库中，简单的代码：\n从头至尾都易于阅读 不预设你已经知道它在做什么 不预设你能记住前面所有的代码 不含非必要的抽象层次 不含过于通用的命名 让读者清楚地了解到传值与决定的传播情况 有注释，解释为什么，而不是代码正在做什么，以避免未来的歧义 有独立的文档 包含有效的错误与失败用例测试 往往不是看起来“聪明”的代码 在代码的简单性和 API 使用的简单性之间可能会需要权衡。例如，让代码更复杂可能是值得的，这样 API 的终端用户可以更容易地正确调用 API。相反，把一些额外的工作留给 API 的终端用户也是值得的，这样代码就会保持简单和容易理解。\n当代码需要复杂性时，应该有意地增加复杂性。如果需要额外的性能，或者一个特定的库或服务有多个不同的客户，这通常是必要的。复杂性可能是合理的，但它应该有相应的文档，以便客户和未来的维护者能够理解和驾驭这种复杂性。这应该用测试和例子来补充，以证明其正确的用法，特别是如果同时有一个“简单”和“复杂”的方法来使用代码。\n这一原则并不意味着复杂的代码不能或不应该用 Go 编写，也不意味着 Go 代码不允许复杂。我们努力使代码库避免不必要的复杂性，因此当复杂性出现时，它表明有关的代码需要仔细理解和维护。理想情况下，应该有相应的注释来解释其中的道理，并指出应该注意的地方。在优化代码以提高性能时，经常会出现这种情况；这样做往往需要更复杂的方法，比如预先分配一个缓冲区并在整个 goroutine 生命周期内重复使用它。当维护者看到这种情况时，应该是一个线索，说明相关的代码是基于性能的关键考虑，这应该影响到未来修改时的谨慎。另一方面，如果不必要地使用，这种复杂性会给那些需要在未来阅读或修改代码的人带来负担。\n如果代码非常复杂，但其目的应该是简单的，这往往是一个我们可以重新审视代码实现的信号，看看是否有更简单的方法来完成同样的事情。\n最小化机制 # 如果有几种方法来表达同一个想法，最好选择使用最标准工具的方法。复杂的机制经常存在，但不应该无缘无故地使用。根据需要增加代码的复杂性是很容易的，而在发现没有必要的情况下删除现有的复杂性则要难得多。\n当足以满足你的使用情况时，争取使用一个核心语言结构（例如通道、切片、地图、循环或结构） 如果没有，就在标准库中寻找一个工具（如 HTTP 客户端或模板引擎） 最后，在引入新的依赖或创建自己的依赖之前，考虑Google 代码库中是否有一个能够满足的核心库 例如，考虑生产代码包含一个绑定在变量上的标志，它的默认值必须在测试中被覆盖。除非打算测试程序的命令行界面本身（例如，用os/exec），否则直接覆盖绑定的值比使用 flag.Set 更简单，因此更可取。\n同样，如果一段代码需要检查集合成员的资格，一个布尔值的映射（例如，map[string]bool）通常就足够了。只有在需要更复杂的操作，不能使用 map 或过于复杂时，才应使用提供类似集合类型和功能的库。\n简洁 # 简洁的 Go 代码具有很高的信噪比。它很容易分辨出相关的细节，而命名和结构则引导读者了解这些细节。\n而有很多东西会常常会阻碍这些最突出的细节：\n重复代码 外来的语法 含义不明的名称 不必要的抽象 空白 重复代码尤其容易掩盖每个相似代码之间的差异，需要读者直观地比较相似的代码行来发现变化。表驱动测试是一个很好的例子，这种机制可以简明地从每个重复的重要细节中找出共同的代码，但是选择哪些部分囊括在表中，会对表格的易懂程度产生影响。\n在考虑多种结构代码的方式时，值得考虑哪种方式能使重要的细节最显著。\n理解和使用常见的代码结构和规范对于保持高信噪比也很重要。例如，下面的代码块在错误处理中非常常见，读者可以很快理解这个代码块的目的。\n// Good: if err := doSomething(); err != nil { // ... } 如果代码看起来非常相似但却有细微的不同，读者可能不会注意到这种变化。在这样的情况下，值得故意“提高”错误检查的信号，增加一个注释以引起关注。\n// Good: if err := doSomething(); err == nil { // if NO error // ... } 可维护性 # 代码被编辑的次数比它写它的次数多得多。可读的代码不仅对试图了解其工作原理的读者有意义，而且对需要改写它的程序员也有意义，清晰性很关键。\n可维护的代码：\n容易让未来的程序员正确进行修改 拥有结构化的 API，使其能够优雅地增加 清楚代码预设条件，并选择映射到问题结构而不是代码结构的抽象 避免不必要的耦合，不包括不使用的功能 有一个全面的测试套件，以确保预期行为可控、重要逻辑正确，并且测试在失败的情况下提供清晰、可操作的诊断 当使用像接口和类型这样的抽象时，根据定义，它们会从使用的上下文中移除信息，因此必须确保它们提供足够的好处。当使用具体类型时，编辑器和 IDE 可以直接连接到方法定义并显示相应的文档，但在其他情况下只能参考接口定义。接口是一个强大的工具，但也是有代价的，因为维护者可能需要了解底层实现的具体细节才能正确使用接口，这必须在接口文档中或在调用现场进行解释。\n可维护的代码还可以避免在容易忽视的地方隐藏重要的细节。例如，在下面的每一行代码中，是否有 : 字符对于理解这一行至关重要。\n// Bad: // 使用 = 而不是 := 可以完全改变这一行的含义 if user, err = db.UserByID(userID); err != nil { // ... } // Bad: // 这行中间的 ！ 很容易错过 leap := (year%4 == 0) \u0026amp;\u0026amp; (!(year%100 == 0) || (year%400 == 0)) 这两种写法不能说错误，但都可以写得更明确，或者可以有一个附带的评论，提醒注意重要的行为。\n// Good: u, err := db.UserByID(userID) if err != nil { return fmt.Errorf(\u0026#34;invalid origin user: %s\u0026#34;, err) } user = u // Good: // 公历闰年不仅仅是 year%4 == 0 // 查看 https://en.wikipedia.org/wiki/Leap_year#Algorithm. var ( leap4 = year%4 == 0 leap100 = year%100 == 0 leap400 = year%400 == 0 ) leap := leap4 \u0026amp;\u0026amp; (!leap100 || leap400) 同样地，一个隐藏了关键逻辑或重要边界情况的辅助函数，可能会使未来的变化很容易地被误解。\n易联想的名字是可维护代码的另一个特点。一个包的用户或一段代码的维护者应该能够联想到一个变量、方法或函数在特定情况下的名称。相同概念的函数参数和接收器名称通常应该共享相同的名称，这既是为了保持文档的可理解性，也是为了方便以最小的开销重构代码。\n可维护的代码尽量减少其依赖性（包括隐性和显性）。对更少包的依赖意味着更少的代码行可以影响其行为。避免对内部或未记录的行为的依赖，使得代码在未来这些行为发生变化时，不太容易造成维护负担。\n在考虑如何构造或编写代码时，值得花时间去思考代码可能随着时间的推移而演变的方式。如果一个给定的方法更有利于未来更容易和更安全的变化，这往往是一个很好的权衡，即使它意味着一个稍微复杂的设计。\n一致 # 一致性的代码是指在更广泛的代码库中，在一个团队或包的范围内，甚至在一个文件中，看起来、感觉和行为都是类似的代码。\n一致性的问题并不凌驾于上述的任何原则之上，但如果必须有所取舍，那往往有利于一致性的实现。\n一个包内的一致性通常是最直接重要的一致性水平。如果同一个问题在一个包里有多种处理方式，或者同一个概念在一个文件里有很多名字，那就会非常不优雅。然而，即使这样，也不应该凌驾于文件的风格原则或全局一致性之上。\n核心准则 # 这些准则收集了所有 Go 代码都应遵循的 Go 风格的最重要方面。我们希望这些原则在你被保障可读性的时候就已经学会并遵循了。这些不会经常改变，新增加内容也有较高准入门槛。\n下面的准则是对 Effective Go 中建议的扩展，它为整个社区的 Go 代码提供了一个共同的基准线。\n格式化 # 所有 Go 源文件必须符合 gofmt 工具所输出的格式。这个格式是由 Google 代码库中的预提交检查强制执行的。生成的代码通常也应该被格式化（例如，通过使用format.Source），因为它也可以在代码搜索中浏览。\n大小写混合 # Go 源代码在编写包含多个字的名称时使用MixedCaps或mixedCaps（驼峰大写）而不是下划线（蛇形大写）。\n即使在其他语言中打破惯例，这也适用。例如，一个常量如果被导出，则为MaxLength（而不是MAX_LENGTH），如果未被导出，则为maxLength（而不是max_length）。\n基于初始化大小写的考量，局部变量被认为是 不可导出的。\n行长度 # Go 源代码没有固定的行长度。如果觉得某一行太长，就应该对其进行重构而不是破坏。如果它已经很短了，那么就应该允许它继续增加。\n不要在以下情况进行分行：\n在缩进变化之前(例如，函数声明、条件) 要使一个长的字符串（例如，一个 URL）适合于多个较短的行 命名 # 命名是艺术而不是科学。在 Go 中，名字往往比许多其他语言的名字短一些，但同样的一般准则也适用，名称应：\n使用时不感到重复 将上下文考虑在内 不重复已经明确的概念 你可以在决定中找到关于命名的更具体的指导。\n本地化一致性 # 如果风格指南对某一特定的风格点没有说明，作者可以自由选择他们喜欢的风格，除非相近的代码（通常在同一个文件或包内，但有时在一个团队或项目目录内）对这个问题采取了一致的立场。\n有效的本地风格化考虑例子：\n使用 %s or %v 来打印错误 使用缓冲通道来代替 mutexes 无效的本地化风格化考虑例子：\n代码行长度的限制 使用基于断言的测试库 如果本地化风格与风格指南不一致，但对可读性的影响仅限于一个文件，它通常会在代码审查中浮出水面，而一致的修复将超出有关 CL 的范围。在这一点上，提交一个 bug 来跟踪修复是合适的。\n如果一个改变会使现有的风格偏差变大，在更多的 API 表面暴露出来，扩大存在偏差的文件数量，或者引入一个实际的错误，那么局部一致性就不再是违反新代码风格指南的有效理由。在这些情况下，作者应该在同一 CL 中清理现有的代码库，在当前 CL 之前进行重构，或者找到一个至少不会使本地化问题恶化的替代方案。\n"},{"id":2,"href":"/styleguide/docs/03-decisions/","title":"03 Decisions","section":"Docs","content":" Go 风格决策 # https://google.github.io/styleguide/go/decisions\n概述 | 指南 | 决策 | 最佳实践\n**注意：**本文是 Google Go 风格 系列文档的一部分。本文档是 规范性(normative) 但不是强制规范(canonical)，并且从属于Google 风格指南。请参阅概述获取更多详细信息。\n关于 # 本文包含旨在统一和为 Go 可读性导师给出的建议提供标准指导、解释和示例的风格决策。\n本文档并不详尽，且会随着时间的推移而增加。如果风格指南 与此处给出的建议相矛盾，风格指南优先，并且本文档应相应更新。\n参见 关于 获取 Go 风格的全套文档。\n以下部分已从样式决策移至指南的一部分：\n混合大写字母MixedCaps: 参见 https://google.github.io/styleguide/go/guide#mixed-caps 格式化Formatting: 参见 https://google.github.io/styleguide/go/guide#formatting 行长度Line Length: 参见 https://google.github.io/styleguide/go/guide#line-length 命名Naming # 有关命名的总体指导，请参阅核心风格指南 中的命名部分，以下部分对命名中的特定区域提供进一步的说明。\n下划线Underscores # Go 中的命名通常不应包含下划线。这个原则有三个例外：\n仅由生成代码导入的包名称可能包含下划线。有关如何选择多词包名称的更多详细信息，请参阅包名称。 *_test.go 文件中的测试、基准和示例函数名称可能包含下划线。 与操作系统或 cgo 互操作的低级库可能会重用标识符，如 syscall 中所做的那样。在大多数代码库中，这预计是非常罕见的。 包名称Package names # Go 包名称应该简短并且只包含小写字母。由多个单词组成的包名称应全部小写。例如，包 tabwriter 不应该命名为 tabWriter、TabWriter 或 tab_writer。\n避免选择可能被常用局部变量遮蔽覆盖 的包名称。例如，usercount 是比 count 更好的包名，因为 count 是常用变量名。\nGo 包名称不应该有下划线。如果你需要导入名称中确实有一个包（通常来自生成的或第三方代码），则必须在导入时将其重命名为适合在 Go 代码中使用的名称。\n一个例外是仅由生成的代码导入的包名称可能包含下划线。具体例子包括：\n对外部测试包使用 _test 后缀，例如集成测试 使用 _test 后缀作为 包级文档示例 避免使用无意义的包名称，例如 util、utility、common、helper 等。查看更多关于所谓的“实用程序包”。\n当导入的包被重命名时（例如 import foob \u0026quot;path/to/foo_go_proto\u0026quot;），包的本地名称必须符合上述规则，因为本地名称决定了包中的符号在文件中的引用方式.如果给定的导入在多个文件中重命名，特别是在相同或附近的包中，则应尽可能使用相同的本地名称以保持一致性。\n另请参阅：https://go.dev/blog/package-names\n接收者命名Receiver names # 接收者 变量名必须满足:\n短（通常是一两个字母的长度） 类型本身的缩写 始终如一地应用于该类型的每个接收者 长名称 更好命名 func (tray Tray) func (t Tray) func (info *ResearchInfo) func (ri *ResearchInfo) func (this *ReportWriter) func (w *ReportWriter) func (self *Scanner) func (s *Scanner) 常量命名Constant names # 常量名称必须像 Go 中的所有其他名称一样使用 混合大写字母MixedCaps。（导出 常量以大写字母开头，而未导出的常量以小写字母开头。）即使打破了其他语言的约定，这也是适用的。常量名称不应是其值的派生词，而应该解释值所表示的含义。\n// Good: const MaxPacketSize = 512 const ( ExecuteBit = 1 \u0026lt;\u0026lt; iota WriteBit ReadBit ) 不要使用非混合大写常量名称或带有 K 前缀的常量。\n// Bad: const MAX_PACKET_SIZE = 512 const kMaxBufferSize = 1024 const KMaxUsersPergroup = 500 根据它们的角色而不是它们的值来命名常量。如果一个常量除了它的值之外没有其他作用，那么就没有必要将它定义为一个常量。\n// Bad: const Twelve = 12 const ( UserNameColumn = \u0026#34;username\u0026#34; GroupColumn = \u0026#34;group\u0026#34; ) 缩写词Initialisms # 名称中的首字母缩略词或单独的首字母缩略词（例如，“URL”和“NATO”）应该具有相同的大小写。URL 应显示为 URL 或 url（如 urlPony 或 URLPony），绝不能显示为 Url。这也适用于 ID 是“identifier”的缩写； 写 appID 而不是 appId。\n在具有多个首字母缩写的名称中（例如 XMLAPI 因为它包含 XML 和 API），给定首字母缩写中的每个字母都应该具有相同的大小写，但名称中的每个首字母缩写不需要具有相同的大小写。 在带有包含小写字母的首字母缩写的名称中（例如DDoS、iOS、gRPC），首字母缩写应该像在标准中一样出现，除非你需要为了满足 导出 而更改第一个字母。在这些情况下，整个缩写词应该是相同的情况（例如 ddos、IOS、GRPC）。 缩写词 范围 正确 错误 XML API Exported XMLAPI XmlApi, XMLApi, XmlAPI, XMLapi XML API Unexported xmlAPI xmlapi, xmlApi iOS Exported IOS Ios, IoS iOS Unexported iOS ios gRPC Exported GRPC Grpc gRPC Unexported gRPC grpc DDoS Exported DDoS DDOS, Ddos DDoS Unexported ddos dDoS, dDOS Get方法Getters # 函数和方法名称不应使用 Get 或 get 前缀，除非底层概念使用单词“get”（例如 HTTP GET）。此时，更应该直接以名词开头的名称，例如使用 Counts 而不是 GetCounts。\n如果该函数涉及执行复杂的计算或执行远程调用，则可以使用Compute 或 Fetch等不同的词代替Get，以使读者清楚函数调用可能需要时间，并有可能会阻塞或失败。\n变量名Variable names # 一般的经验法则是，名称的长度应与其范围的大小成正比，并与其在该范围内使用的次数成反比。在文件范围内创建的变量可能需要多个单词，而单个内部块作用域内的变量可能是单个单词甚至只是一两个字符，以保持代码清晰并避免无关信息。\n这是一条粗略的基础原则。这些数字准则不是严格的规则。要根据上下文、清晰 和[简洁](https://google.github.io/styleguide/go/guide#简洁）来进行判断。\n小范围是执行一两个小操作的范围，比如 1-7 行。 中等范围是一些小的或一个大的操作，比如 8-15 行。 大范围是一个或几个大操作，比如 15-25 行。 非常大的范围是指超过一页（例如，超过 25 行）的任何内容。 在小范围内可能非常清楚的名称（例如，c 表示计数器）在较大范围内可能不够用，并且需要澄清以提示进一步了解其在代码中的用途。一个作用域中有很多变量，或者表示相似值或概念的变量，那就可能需要比作用域建议的采用更长的变量名称。\n概念的特殊性也有助于保持变量名称的简洁。例如，假设只有一个数据库在使用，像db这样的短变量名通常可能保留给非常小的范围，即使范围非常大，也可能保持完全清晰。在这种情况下，根据范围的大小，单个词database可能是可接受的，但不是必需的，因为db是该词的一种非常常见的缩写，几乎没有其他解释。\n局部变量的名称应该反映它包含的内容以及它在当前上下文中的使用方式，而不是值的来源。例如，通常情况下最佳局部变量名称与结构或协议缓冲区字段名称不同。\n一般来说：\n像 count 或 options 这样的单字名称是一个很好的起点。\n可以添加其他词来消除相似名称的歧义，例如 userCount 和 projectCount。\n不要简单地省略字母来节省打字时间。例如，Sandbox 优于 Sbx，特别是对于导出的名称。\n大多数变量名可省略 类型和类似类型的词\n对于数字，userCount 是比 numUsers 或 usersInt 更好的名称。 对于切片，users 是一个比 userSlice 更好的名字。 如果范围内有两个版本的值，则包含类似类型的限定符是可以接受的，例如，你可能将输入存储在 ageString 中，并使用 age 作为解析值。 省略上下文 中清楚的单词。例如，在 UserCount 方法的实现中，名为 userCount 的局部变量可能是多余的； count、users 甚至 c 都具有可读性。\n单字母变量名Single-letter variable names # 单字母变量名是可以减少重复 的有用工具，但也可能使代码变得不透明。将它们的使用限制在完整单词很明显以及它会重复出现以代替单字母变量的情况。\n一般来说：\n对于方法接收者变量，最好使用一个字母或两个字母的名称。 对常见类型使用熟悉的变量名通常很有帮助： r 用于 io.Reader 或 *http.Request w 用于 io.Writer 或 http.ResponseWriter 单字母标识符作为整数循环变量是可接受的，特别是对于索引（例如，i）和坐标（例如，x 和 y）。 当范围很短时，循环标识符使用缩写是可接受的，例如for _, n := range nodes { ... }。 重复Repetition # 一段 Go 源代码应该避免不必要的重复。一个常见的情形是重复名称，其中通常包含不必要的单词或重复其上下文或类型。如果相同或相似的代码段在很近的地方多次出现，代码本身也可能是不必要的重复。\n重复命名可以有多种形式，包括：\n包名 vs 可导出符号名Package vs. exported symbol name # 当命名导出的符号时，包的名称始终在包外可见，因此应减少或消除两者之间的冗余信息。如果一个包如果需要仅导出一种类型并且以包本身命名，则构造函数的规范名称是New（如果需要的话）。\n实例: 重复的名称 -\u0026gt; 更好的名称\nwidget.NewWidget -\u0026gt; widget.New widget.NewWidgetWithName -\u0026gt; widget.NewWithName db.LoadFromDatabase -\u0026gt; db.Load goatteleportutil.CountGoatsTeleported -\u0026gt; gtutil.CountGoatsTeleported or goatteleport.Count myteampb.MyTeamMethodRequest -\u0026gt; mtpb.MyTeamMethodRequest or myteampb.MethodRequest 变量名 vs 类型Variable name vs. type # 编译器总是知道变量的类型，并且在大多数情况下，阅读者也可以通过变量的使用方式清楚地知道变量是什么类型。只有当一个变量的值在同一范围内出现两次时，才有需要明确变量的类型。\n重复的名称 更好的名称 var numUsers int var users int var nameString string var name string var primaryProject *Project var primary *Project 如果该值以多种形式出现，这可以通过额外的词（如raw和parsed）或底层表示来澄清：\n// Good: limitStr := r.FormValue(\u0026#34;limit\u0026#34;) limit, err := strconv.Atoi(limitStr) // Good: limitRaw := r.FormValue(\u0026#34;limit\u0026#34;) limit, err := strconv.Atoi(limitRaw) 外部上下文 vs 本地名称External context vs. local names # 包含来自周围上下文信息的名称通常会产生额外的噪音，而没有任何好处。包名、方法名、类型名、函数名、导入路径，包含来自其上下文信息的名称。 Names that include information from their surrounding context often create extra noise without benefit. The package name, method name, type name, function name, import path, and even filename can all provide context that automatically qualifies all names within.\n// Bad: // In package \u0026#34;ads/targeting/revenue/reporting\u0026#34; type AdsTargetingRevenueReport struct{} func (p *Project) ProjectName() string // Good: // In package \u0026#34;ads/targeting/revenue/reporting\u0026#34; type Report struct{} func (p *Project) Name() string // Bad: // In package \u0026#34;sqldb\u0026#34; type DBConnection struct{} // Good: // In package \u0026#34;sqldb\u0026#34; type Connection struct{} // Bad: // In package \u0026#34;ads/targeting\u0026#34; func Process(in *pb.FooProto) *Report { adsTargetingID := in.GetAdsTargetingID() } // Good: // In package \u0026#34;ads/targeting\u0026#34; func Process(in *pb.FooProto) *Report { id := in.GetAdsTargetingID() } 重复通常应该在符号使用者的上下文中进行评估，而不是孤立地进行评估。例如，下面的代码有很多名称，在某些情况下可能没问题，但在上下文中是多余的：\n// Bad: func (db *DB) UserCount() (userCount int, err error) { var userCountInt64 int64 if dbLoadError := db.LoadFromDatabase(\u0026#34;count(distinct users)\u0026#34;, \u0026amp;userCountInt64); dbLoadError != nil { return 0, fmt.Errorf(\u0026#34;failed to load user count: %s\u0026#34;, dbLoadError) } userCount = int(userCountInt64) return userCount, nil } 相反，在上下文和使用上信息是清楚的情况下，常常可以忽略：\n// Good: func (db *DB) UserCount() (int, error) { var count int64 if err := db.Load(\u0026#34;count(distinct users)\u0026#34;, \u0026amp;count); err != nil { return 0, fmt.Errorf(\u0026#34;failed to load user count: %s\u0026#34;, err) } return int(count), nil } 评论Commentary # 关于评论的约定（包括评论什么、使用什么风格、如何提供可运行的示例等）旨在支持阅读公共 API 文档的体验。有关详细信息，请参阅 Effective Go。\n最佳实践文档关于 文档约定 的部分进一步讨论了这一点。\n**最佳实践：**在开发和代码审查期间使用文档预览 查看文档和可运行示例是否有用并以你期望的方式呈现。\n提示： Godoc 使用很少的特殊格式； 列表和代码片段通常应该缩进以避免换行。除缩进外，通常应避免装饰。\n注释行长度Comment line length # 确保注释在即使在较窄的屏幕上的可读性。\n当评论变得太长时，建议将其包装成多个单行评论。在可能的情况下，争取在 80 列宽的终端上阅读良好的注释，但这并不是硬性限制； Go 中的注释没有固定的行长度限制。例如，标准库经常选择根据标点符号来打断注释，这有时会使个别行更接近 60-70 个字符标记。\n有很多现有代码的注释长度超过 80 个字符。本指南不应作为更改此类代码作为可读性审查的一部分的理由（请参阅一致性），但鼓励团队作为其他重构的一部分，有机会时更新注释以遵循此指南。本指南的主要目标是确保所有 Go 可读性导师在提出建议时以及是否提出相同的建议。\n有关评论的更多信息，请参阅此 来自 The Go Blog 的帖子。\n# Good: // This is a comment paragraph. // The length of individual lines doesn\u0026#39;t matter in Godoc; // but the choice of wrapping makes it easy to read on narrow screens. // // Don\u0026#39;t worry too much about the long URL: // https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Chordata/Mammalia/Rodentia/Geomyoidea/Geomyidae/ // // Similarly, if you have other information that is made awkward // by too many line breaks, use your judgment and include a long line // if it helps rather than hinders. 避免注释在小屏幕上重复换行，这是一种糟糕的阅读体验。\n# Bad: // This is a comment paragraph. The length of individual lines doesn\u0026#39;t matter in Godoc; // but the choice of wrapping causes jagged lines on narrow screens or in Critique, // which can be annoying, especially when in a comment block that will wrap repeatedly. // // Don\u0026#39;t worry too much about the long URL: // https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Chordata/Mammalia/Rodentia/Geomyoidea/Geomyidae/ 文档注释Doc comments # 所有顶级导出名称都必须有文档注释，具有不明显行为或含义的未导出类型或函数声明也应如此。这些注释应该是完整句子，以所描述对象的名称开头。冠词（“a”、“an”、“the”）可以放在名字前面，使其读起来更自然。\n// Good: // A Request represents a request to run a command. type Request struct { ... // Encode writes the JSON encoding of req to w. func Encode(w io.Writer, req *Request) { ... 文档注释出现在 Godoc 中，并通过 IDE 显示，因此应该为使用该包的任何人编写文档注释。\n如果出现在结构中，文档注释适用于以下符号或字段组：\n// Good: // Options configure the group management service. type Options struct { // General setup: Name string Group *FooGroup // Dependencies: DB *sql.DB // Customization: LargeGroupThreshold int // optional; default: 10 MinimumMembers int // optional; default: 2 } **最佳实践：**如果你对未导出的代码有文档注释，请遵循与导出代码相同的习惯（即，以未导出的名称开始注释）。这使得以后导出它变得容易，只需在注释和代码中用新导出的名称替换未导出的名称即可。\n注释语句Comment sentences # 完整的注释应该像标准英语句子一样包含大写和标点符号。（作为一个例外，如果在其他方面很清楚，可以以非大写的标识符名称开始一个句子。这种情况最好只在段落的开头进行。）\n作为句子片段的注释对标点符号或大小写没有此类要求。\n文档注释 应始终是完整的句子，因此应始终大写和标点符号。简单的行尾注释（特别是对于结构字段）可以为假设字段名称是主语的简单短语。\n// Good: // A Server handles serving quotes from the collected works of Shakespeare. type Server struct { // BaseDir points to the base directory under which Shakespeare\u0026#39;s works are stored. // // The directory structure is expected to be the following: // {BaseDir}/manifest.json // {BaseDir}/{name}/{name}-part{number}.txt BaseDir string WelcomeMessage string // displayed when user logs in ProtocolVersion string // checked against incoming requests PageLength int // lines per page when printing (optional; default: 20) } 示例Examples # 包应该清楚地记录它们的预期用途。尝试提供一个可运行的例子； 示例出现在 Godoc 中。可运行示例属于测试文件，而不是生产源文件。请参阅此示例（Godoc，[source](https://cs.opensource.google/go/go/+/HEAD:src/time /example_test.go））。\n如果无法提供可运行的示例，可以在代码注释中提供示例代码。与注释中的其他代码和命令行片段一样，它应该遵循标准格式约定。\n命名的结果参数Named result parameters # 当有命名参数时，请考虑函数签名在 Godoc 中的显示方式。函数本身的名称和结果参数的类型通常要足够清楚。\n// Good: func (n *Node) Parent1() *Node func (n *Node) Parent2() (*Node, error) 如果一个函数返回两个或多个相同类型的参数，添加名称会很有用。\n// Good: func (n *Node) Children() (left, right *Node, err error) 如果调用者必须对特定的结果参数采取行动，命名它们可以帮助暗示行动是什么：\n// Good: // WithTimeout returns a context that will be canceled no later than d duration // from now. // // The caller must arrange for the returned cancel function to be called when // the context is no longer needed to prevent a resource leak. func WithTimeout(parent Context, d time.Duration) (ctx Context, cancel func()) 在上面的代码中，取消是调用者必须执行的特定操作。但是，如果将结果参数单独写为(Context, func())，“取消函数”的含义就不清楚了。\n当名称产生 不必要的重复 时，不要使用命名结果参数。\n// Bad: func (n *Node) Parent1() (node *Node) func (n *Node) Parent2() (node *Node, err error) 不要为了避免在函数内声明变量而使用命名结果参数。这种做法会导致不必要的冗长API，但收益只是微小的简洁性。\n裸返回 仅在小函数中是可接受的。一旦它是一个中等大小的函数，就需要明确你的返回值。同样，不要仅仅因为可以裸返回就使用命名结果参数。清晰度 总是比在你的函数中节省几行更重要。\n如果必须在延迟闭包中更改结果参数的值，则命名结果参数始终是可以接受的。\n提示： 类型通常比函数签名中的名称更清晰。GoTip #38：作为命名类型的函数 演示了这一点。\n在上面的 WithTimeout 中，代码使用了一个 CancelFunc 而不是结果参数列表中的原始func()，并且几乎不需要做任何记录工作。\n包注释 # 包注释必须出现在包内语句的上方，注释和包名称之间没有空行。例子：\n// Good: // Package math provides basic constants and mathematical functions. // // This package does not guarantee bit-identical results across architectures. package math 每个包必须有一个包注释。如果一个包由多个文件组成，那么其中一个文件应该有包注释。\nmain 包的注释形式略有不同，其中 BUILD 文件中的 go_binary 规则的名称代替了包名。\n// Good: // The seed_generator command is a utility that generates a Finch seed file // from a set of JSON study configs. package main 只要二进制文件的名称与 BUILD 文件中所写的完全一致，其他风格的注释也是可以了。当二进制名称是第一个单词时，即使它与命令行调用的拼写不严格匹配，也需要将其大写。\n// Good: // Binary seed_generator ... // Command seed_generator ... // Program seed_generator ... // The seed_generator command ... // The seed_generator program ... // Seed_generator ... 提示:\n命令行调用示例和 API 用法可以是有用的文档。对于 Godoc 格式，缩进包含代码的注释行。\n如果没有明显的main文件或者包注释特别长，可以将文档注释放在名为 doc.go 的文件中，只有注释和包子句。\n可以使用多行注释代替多个单行注释。如果文档包含可能对从源文件复制和粘贴有用的部分，如示例命令行（用于二进制文件）和模板示例，这将非常有用。\n// Good: /* The seed_generator command is a utility that generates a Finch seed file from a set of JSON study configs. seed_generator *.json | base64 \u0026gt; finch-seed.base64 */ package template 供维护者使用且适用于整个文件的注释通常放在导入声明之后。这些不会出现在 Godoc 中，也不受上述包注释规则的约束。\n导入 # 导入重命名 # 只有在为了避免与其他导入的名称冲突时，才使用重命名导入。（由此推论，好的包名称 不需要重命名。）如果发生名称冲突，最好重命名 最本地或特定于项目的导入。包的本地别名必须遵循包命名指南，包括禁止使用下划线和大写字母。\n生成的 protocol buffer 包必须重命名以从其名称中删除下划线，并且它们的别名必须具有 pb 后缀。有关详细信息，请参阅 proto 和 stub 最佳实践。\n// Good: import ( fspb \u0026#34;path/to/package/foo_service_go_proto\u0026#34; ) 导入的包名称没有有用的识别信息时（例如 package v1），应该重命名以包括以前的路径组件。重命名必须与导入相同包的其他本地文件一致，并且可以包括版本号。\n注意： 最好重命名包以符合 好的包命名规则，但在vendor目录下的包通常是不可行的。\n// Good: import ( core \u0026#34;github.com/kubernetes/api/core/v1\u0026#34; meta \u0026#34;github.com/kubernetes/apimachinery/pkg/apis/meta/v1beta1\u0026#34; ) 如果你需要导入一个名称与你要使用的公共局部变量名称（例如 url、ssh）冲突的包，并且你希望重命名该包，首选方法是使用 pkg 后缀（例如 urlpkg）。请注意，可以使用局部变量隐藏包； 仅当此类变量在范围内时仍需要使用此包时，才需要重命名。\n导入分组 # 导入应分为两组：\n标准库包 其他（项目和vendor）包 // Good: package main import ( \u0026#34;fmt\u0026#34; \u0026#34;hash/adler32\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/dsnet/compress/flate\u0026#34; \u0026#34;golang.org/x/text/encoding\u0026#34; \u0026#34;google.golang.org/protobuf/proto\u0026#34; foopb \u0026#34;myproj/foo/proto/proto\u0026#34; _ \u0026#34;myproj/rpc/protocols/dial\u0026#34; _ \u0026#34;myproj/security/auth/authhooks\u0026#34; ) 将导入项分成多个组是可以接受的，例如，如果你想要一个单独的组来重命名、导入仅为了特殊效果 或另一个特殊的导入组。\n// Good: package main import ( \u0026#34;fmt\u0026#34; \u0026#34;hash/adler32\u0026#34; \u0026#34;os\u0026#34; \u0026#34;github.com/dsnet/compress/flate\u0026#34; \u0026#34;golang.org/x/text/encoding\u0026#34; \u0026#34;google.golang.org/protobuf/proto\u0026#34; foopb \u0026#34;myproj/foo/proto/proto\u0026#34; _ \u0026#34;myproj/rpc/protocols/dial\u0026#34; _ \u0026#34;myproj/security/auth/authhooks\u0026#34; ) 注意： goimports 不支持维护可选组 - 超出标准库和 Google 导入之间强制分离所需的拆分。为了保持符合状态，额外的导入子组需要作者和审阅人的注意。\nGoogle 程序有时也是 AppEngine 应用程序，应该有一个单独的组用于 AppEngine 导入。\nGofmt 负责按导入路径对每个组进行排序。但是，它不会自动将导入分成组。流行的 goimports 工具结合了 Gofmt 和导入管理，根据上述规则将导入进行分组。通过 goimports 来管理导入顺序是可行的，但随着文件的修改，其导入列表必须保持内部一致。\n导入\u0026quot;空\u0026quot; (import _) # 使用语法 import _ \u0026quot;package\u0026quot;导入的包，称为副作用导入，只能在主包或需要它们的测试中导入。\n此类软件包的一些示例包括：\ntime/tzdata image/jpeg 在图像处理中的代码 避免在工具包中导入空白，即使工具包间接依赖于它们。将副作用导入限制到主包有助于控制依赖性，并使得编写依赖于不同导入的测试成为可能，而不会发生冲突或浪费构建成本。\n以下是此规则的唯一例外情况：\n你可以使用空白导入来绕过 nogo 静态检查器 中对不允许导入的检查。 你可以在使用 //go:embed 编译器指令的源文件中使用 embed 包的空白导入。 **提示：**如果生产环境中你创建的工具包间接依赖于副作用导入，请记录这里的预期用途。\n导入 “.” (import .) # import . 形式是一种语言特性，它允许将从另一个包导出的标识符无条件地带到当前包中。有关更多信息，请参阅语言规范。\n不要在 Google 代码库中使用此功能； 这使得更难判断功能来自何处。\n// Bad: package foo_test import ( \u0026#34;bar/testutil\u0026#34; // also imports \u0026#34;foo\u0026#34; . \u0026#34;foo\u0026#34; ) var myThing = Bar() // Bar defined in package foo; no qualification needed. // Good: package foo_test import ( \u0026#34;bar/testutil\u0026#34; // also imports \u0026#34;foo\u0026#34; \u0026#34;foo\u0026#34; ) var myThing = foo.Bar() 错误 # 返回错误 # 使用 error 表示函数可能会失败。按照惯例，error 是最后一个结果参数。\n// Good: func Good() error { /* ... */ } 返回 nil 错误是表示操作成功的惯用方式，否则表示可能会失败。如果函数返回错误，除非另有明确说明，否则调用者必须将所有非错误返回值视为未确定。通常来说，非错误返回值是它们的零值，但也不能直接这么假设。\n// Good: func GoodLookup() (*Result, error) { // ... if err != nil { return nil, err } return res, nil } 返回错误的导出函数应使用error类型返回它们。具体的错误类型容易受到细微错误的影响：一个 nil 指针可以包装到接口中，从而就变成非 nil 值（参见 关于该主题的 Go FAQ 条目）。\n// Bad: func Bad() *os.PathError { /*...*/ } 提示：采用 context.Context 参数的函数通常应返回 error，以便调用者可以确定上下文是否在函数运行时被取消。\n错误字符串 # 错误字符串不应大写（除非以导出名称、专有名词或首字母缩写词开头）并且不应以标点符号结尾。这是因为错误字符串通常在打印给用户之前出现在其他上下文中。\n// Bad: err := fmt.Errorf(\u0026#34;Something bad happened.\u0026#34;) // Good: err := fmt.Errorf(\u0026#34;something bad happened\u0026#34;) 另一方面，完整显示消息（日志记录、测试失败、API 响应或其他 UI）的样式视情况而定，但通常应大写首字母。\n// Good: log.Infof(\u0026#34;Operation aborted: %v\u0026#34;, err) log.Errorf(\u0026#34;Operation aborted: %v\u0026#34;, err) t.Errorf(\u0026#34;Op(%q) failed unexpectedly; err=%v\u0026#34;, args, err) 错误处理 # 遇到错误的代码应该慎重选择如何处理它。使用 _ 变量丢弃错误通常是不合适的。如果函数返回错误，请执行以下操作之一：\n立即处理并解决错误 将错误返回给调用者 在特殊情况下，调用 log.Fatal 或（如绝对有必要）则调用 panic 注意： log.Fatalf 不是标准库日志。参见 [#logging]。\n在极少数情况下适合忽略或丢弃错误（例如调用 (*bytes.Buffer).Write 被记录为永远不会失败），随附的注释应该解释为什么这是安全的。\n// Good: var b *bytes.Buffer n, _ := b.Write(p) // never returns a non-nil error 关于错误处理的更多讨论和例子，请参见Effective Go和最佳实践。\nIn-band 错误 # 在C和类似语言中，函数通常会返回-1、null或空字符串等值，以示错误或丢失结果。这就是所谓的In-band处理。\n// Bad: // Lookup returns the value for key or -1 if there is no mapping for key. func Lookup(key string) int 未能检查In-band错误值会导致错误，并可能将 error 归于错误的功能。\n// Bad: // The following line returns an error that Parse failed for the input value, // whereas the failure was that there is no mapping for missingKey. return Parse(Lookup(missingKey)) Go对多重返回值的支持提供了一个更好的解决方案（见Effective Go关于多重返回的部分）。与其要求调用方检查In-band的错误值，函数更应该返回一个额外的值来表明返回值是否有效。这个返回值可以是一个错误，或者在不需要解释时是一个布尔值，并且应该是最终的返回值。\n// Good: // Lookup returns the value for key or ok=false if there is no mapping for key. func Lookup(key string) (value string, ok bool) 这个 API 可以防止调用者错误地编写Parse(Lookup(key))，从而导致编译时错误，因为Lookup(key)有两个返回值。\n以这种方式返回错误，来构筑更强大和明确的错误处理。\n// Good: value, ok := Lookup(key) if !ok { return fmt.Errorf(\u0026#34;no value for %q\u0026#34;, key) } return Parse(value) 一些标准库函数，如包strings中的函数，返回In-band错误值。这大大简化了字符串处理的代码，但代价是要求程序员更加勤奋。一般来说，Google 代码库中的 Go 代码应该为错误返回额外的值\n缩进错误流程 # 在继续代码的其余部分之前处理错误。这提高了代码的可读性，使读者能够快速找到正常路径。这个逻辑同样适用于任何测试条件并以终端条件结束的代码块（例如，return、panic、log.Fatal）。\n如果终止条件没有得到满足，运行的代码应该出现在if块之后，而不应该缩进到else子句中。\n// Good: if err != nil { // error handling return // or continue, etc. } // normal code // Bad: if err != nil { // error handling } else { // normal code that looks abnormal due to indentation } **提示：**如果你使用一个变量超过几行代码，通常不值得使用带有初始化的 if 风格。在这种情况下，通常最好将声明移出，使用标准的if语句。\n// Good: x, err := f() if err != nil { // error handling return } // lots of code that uses x // across multiple lines // Bad: if x, err := f(); err != nil { // error handling return } else { // lots of code that uses x // across multiple lines } 更多细节见Go Tip #1：视线和TotT：通过减少嵌套降低代码的复杂性。\n语言 # 字面格式化 # Go 有一个非常强大的复合字面语法，用它可以在一个表达式中表达深度嵌套的复杂值。在可能的情况下，应该使用这种字面语法，而不是逐字段建值。字面意义的 gofmt格式一般都很好，但有一些额外的规则可以使这些字面意义保持可读和可维护。\n字段名称 # 对于在当前包之外定义的类型，结构体字面量通常应该指定字段名。\n包括来自其他包的类型的字段名。\n// Good: good := otherpkg.Type{A: 42} 结构中字段的位置和字段的完整集合（当字段名被省略时，这两者都是有必要搞清楚的）通常不被认为是结构的公共 API 的一部分；需要指定字段名以避免不必要的耦合。\n// Bad: // https://pkg.go.dev/encoding/csv#Reader r := csv.Reader{\u0026#39;,\u0026#39;, \u0026#39;#\u0026#39;, 4, false, false, false, false} 在小型、简单的结构中可以省略字段名，这些结构的组成和顺序都有文档证明是稳定的。\n// Good: okay := image.Point{42, 54} also := image.Point{X: 42, Y: 54} 对于包内类型，字段名是可选的。\n// Good: okay := Type{42} also := internalType{4, 2} 如果能使代码更清晰，还是应该使用字段名，而且这样做是很常见的。例如，一个有大量字段的结构几乎都应该用字段名来初始化。\n// Good: okay := StructWithLotsOfFields{ field1: 1, field2: \u0026#34;two\u0026#34;, field3: 3.14, field4: true, } 匹配的大括号 # 一对大括号的最后一半应该总是出现在一行中，其缩进量与开头的大括号相同。单行字词必然具有这个属性。当字面意义跨越多行时，保持这一属性可以使字面意义的括号匹配与函数和if语句等常见 Go 语法结构的括号匹配相同。\n这方面最常见的错误是在多行结构字中把收尾括号与值放在同一行。在这种情况下，该行应以逗号结束，收尾括号应出现在下一行。\n// Good: good := []*Type{{Key: \u0026#34;value\u0026#34;}} // Good: good := []*Type{ {Key: \u0026#34;multi\u0026#34;}, {Key: \u0026#34;line\u0026#34;}, } // Bad: bad := []*Type{ {Key: \u0026#34;multi\u0026#34;}, {Key: \u0026#34;line\u0026#34;}} // Bad: bad := []*Type{ { Key: \u0026#34;value\u0026#34;}, } Cuddled 大括号 # 只有在以下两种情况下，才允许在大括号之间为切片和数组丢弃空格（又称 \u0026ldquo;“cuddling”）。\n缩进匹配 内部值也是字面意义或原语构建者（即不是变量或其他表达式） // Good: good := []*Type{ { // Not cuddled Field: \u0026#34;value\u0026#34;, }, { Field: \u0026#34;value\u0026#34;, }, } // Good: good := []*Type{{ // Cuddled correctly Field: \u0026#34;value\u0026#34;, }, { Field: \u0026#34;value\u0026#34;, }} // Good: good := []*Type{ first, // Can\u0026#39;t be cuddled {Field: \u0026#34;second\u0026#34;}, } // Good: okay := []*pb.Type{pb.Type_builder{ Field: \u0026#34;first\u0026#34;, // Proto Builders may be cuddled to save vertical space }.Build(), pb.Type_builder{ Field: \u0026#34;second\u0026#34;, }.Build()} // Bad: bad := []*Type{ first, { Field: \u0026#34;second\u0026#34;, }} 重复的类型名称 # 重复的类型名称可以从 slice 和 map 字面上省略，这对减少杂乱是有帮助的。明确重复类型名称的一个合理场合，当在你的项目中处理一个不常见的复杂类型时，当重复的类型名称在一行上却相隔很远的时候，可以提醒读者的上下文。\n// Good: good := []*Type{ {A: 42}, {A: 43}, } // Bad: repetitive := []*Type{ \u0026amp;Type{A: 42}, \u0026amp;Type{A: 43}, } // Good: good := map[Type1]*Type2{ {A: 1}: {B: 2}, {A: 3}: {B: 4}, } // Bad: repetitive := map[Type1]*Type2{ Type1{A: 1}: \u0026amp;Type2{B: 2}, Type1{A: 3}: \u0026amp;Type2{B: 4}, } **提示：**如果你想删除结构字中重复的类型名称，可以运行gofmt -s。\n零值字段 # 零值字段可以从结构字段中省略，但不能因此而失去清晰这个风格原则。\n设计良好的 API 经常采用零值结构来提高可读性。例如，从下面的结构中省略三个零值字段，可以使人们注意到正在指定的唯一选项。\n// Bad: import ( \u0026#34;github.com/golang/leveldb\u0026#34; \u0026#34;github.com/golang/leveldb/db\u0026#34; ) ldb := leveldb.Open(\u0026#34;/my/table\u0026#34;, \u0026amp;db.Options{ BlockSize int: 1\u0026lt;\u0026lt;16, ErrorIfDBExists: true, // These fields all have their zero values. BlockRestartInterval: 0, Comparer: nil, Compression: nil, FileSystem: nil, FilterPolicy: nil, MaxOpenFiles: 0, WriteBufferSize: 0, VerifyChecksums: false, }) // Good: import ( \u0026#34;github.com/golang/leveldb\u0026#34; \u0026#34;github.com/golang/leveldb/db\u0026#34; ) ldb := leveldb.Open(\u0026#34;/my/table\u0026#34;, \u0026amp;db.Options{ BlockSize int: 1\u0026lt;\u0026lt;16, ErrorIfDBExists: true, }) 表驱动的测试中的结构经常受益于显式字段名，特别是当测试结构不是琐碎的时候。这允许作者在有关字段与测试用例无关时完全省略零值字段。例如，成功的测试案例应该省略任何与错误或失败相关的字段。在零值对于理解测试用例是必要的情况下，例如测试零或 nil 输入，应该指定字段名。\n简明\ntests := []struct { input string wantPieces []string wantErr error }{ { input: \u0026#34;1.2.3.4\u0026#34;, wantPieces: []string{\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;}, }, { input: \u0026#34;hostname\u0026#34;, wantErr: ErrBadHostname, }, } 明确\ntests := []struct { input string wantIPv4 bool wantIPv6 bool wantErr bool }{ { input: \u0026#34;1.2.3.4\u0026#34;, wantIPv4: true, wantIPv6: false, }, { input: \u0026#34;1:2::3:4\u0026#34;, wantIPv4: false, wantIPv6: true, }, { input: \u0026#34;hostname\u0026#34;, wantIPv4: false, wantIPv6: false, wantErr: true, }, } Nil 切片 # 在大多数情况下，nil和空切片之间没有功能上的区别。像len和cap这样的内置函数在nil片上的表现与预期相同。\n// Good: import \u0026#34;fmt\u0026#34; var s []int // nil fmt.Println(s) // [] fmt.Println(len(s)) // 0 fmt.Println(cap(s)) // 0 for range s {...} // no-op s = append(s, 42) fmt.Println(s) // [42] 如果你声明一个空切片作为局部变量（特别是如果它可以成为返回值的来源），最好选择 nil 初始化，以减少调用者的错误风险\n// Good: var t []string // Bad: t := []string{} 不要创建强迫调用者区分 nil 和空切片的 API。\n// Good: // Ping pings its targets. // Returns hosts that successfully responded. func Ping(hosts []string) ([]string, error) { ... } // Bad: // Ping pings its targets and returns a list of hosts // that successfully responded. Can be empty if the input was empty. // nil signifies that a system error occurred. func Ping(hosts []string) []string { ... } 在设计接口时，避免区分 nil 切片和非 nil 的零长度切片，因为这可能导致微妙的编程错误。这通常是通过使用len来检查是否为空，而不是==nil来实现的。\n这个实现同时将nil和零长度的切片视为 \u0026ldquo;空\u0026rdquo;。\n// Good: // describeInts describes s with the given prefix, unless s is empty. func describeInts(prefix string, s []int) { if len(s) == 0 { return } fmt.Println(prefix, s) } 而不是依靠二者的区别作为API的一部分：\n// Bad: func maybeInts() []int { /* ... */ } // describeInts describes s with the given prefix; pass nil to skip completely. func describeInts(prefix string, s []int) { // The behavior of this function unintentionally changes depending on what // maybeInts() returns in \u0026#39;empty\u0026#39; cases (nil or []int{}). if s == nil { return } fmt.Println(prefix, s) } describeInts(\u0026#34;Here are some ints:\u0026#34;, maybeInts()) 详见 in-band 错误.\n缩进的混乱 # 如果断行会使其余的行与缩进的代码块对齐，则应避免引入断行。如果这是不可避免的，请留下一个空间，将代码块中的代码与包线分开。\n// Bad: if longCondition1 \u0026amp;\u0026amp; longCondition2 \u0026amp;\u0026amp; // Conditions 3 and 4 have the same indentation as the code within the if. longCondition3 \u0026amp;\u0026amp; longCondition4 { log.Info(\u0026#34;all conditions met\u0026#34;) } 具体准则和例子见以下章节：\nFunction formatting Conditionals and loops Literal formatting 函数格式化 # 函数定义或方法声明的签名应该保持在一行，以避免缩进的混乱。\n函数参数列表可以成为Go源文件中最长的几行。然而，它们在缩进的变化之前，因此很难以不使后续行看起来像函数体的一部分的混乱方式来断行。\n// Bad: func (r *SomeType) SomeLongFunctionName(foo1, foo2, foo3 string, foo4, foo5, foo6 int) { foo7 := bar(foo1) // ... } 参见最佳实践，了解一些缩短函数调用的选择，否则这些函数会有很多参数。\n// Good: good := foo.Call(long, CallOptions{ Names: list, Of: of, The: parameters, Func: all, Args: on, Now: separate, Visible: lines, }) // Bad: bad := foo.Call( long, list, of, parameters, all, on, separate, lines, ) 通过分解局部变量，通常可以缩短行数。\n// Good: local := helper(some, parameters, here) good := foo.Call(list, of, parameters, local) 类似地，函数和方法调用不应该仅仅由于行的长度而进行换行。\n// Good: good := foo.Call(long, list, of, parameters, all, on, one, line) // Bad: bad := foo.Call(long, list, of, parameters, with, arbitrary, line, breaks) 不要为特定的函数参数添加注释。相反，使用 option struct 或在函数文档中添加更多细节。\n// Good: good := server.New(ctx, server.Options{Port: 42}) // Bad: bad := server.New( ctx, 42, // Port ) 如果调用参数确实长得令人很难受，那么就应该考虑重构：\n// Good: // Sometimes variadic arguments can be factored out replacements := []string{ \u0026#34;from\u0026#34;, \u0026#34;to\u0026#34;, // related values can be formatted adjacent to one another \u0026#34;source\u0026#34;, \u0026#34;dest\u0026#34;, \u0026#34;original\u0026#34;, \u0026#34;new\u0026#34;, } // Use the replacement struct as inputs to NewReplacer. replacer := strings.NewReplacer(replacements...) 当 API 无法更改或本地调用是不频繁的（无论调用是否太长），在有助于理解本次调用的前提下，那么是始终允许添加换行符的。\n// Good: canvas.RenderCube(cube, x0, y0, z0, x0, y0, z1, x0, y1, z0, x0, y1, z1, x1, y0, z0, x1, y0, z1, x1, y1, z0, x1, y1, z1, ) 请注意，上面示例中的行没有在特定的列边界处换行，而是根据坐标三元组进行分组。\n函数中的长字符串不应该因为行的长度而被破坏。对于包含此类字符串的函数，可以在字符串格式之后添加换行符，并且可以在下一行或后续行中提供参数。最好根据输入的语义分组来决定换行符应该放在哪里，而不是单纯基于行长。\n// Good: log.Warningf(\u0026#34;Database key (%q, %d, %q) incompatible in transaction started by (%q, %d, %q)\u0026#34;, currentCustomer, currentOffset, currentKey, txCustomer, txOffset, txKey) // Bad: log.Warningf(\u0026#34;Database key (%q, %d, %q) incompatible in\u0026#34;+ \u0026#34; transaction started by (%q, %d, %q)\u0026#34;, currentCustomer, currentOffset, currentKey, txCustomer, txOffset, txKey) 条件和循环 # if 语句不应换行； 多行 if 子句的形式会出现 缩进混乱带来的困扰。\n// Bad: // The second if statement is aligned with the code within the if block, causing // indentation confusion. if db.CurrentStatusIs(db.InTransaction) \u0026amp;\u0026amp; db.ValuesEqual(db.TransactionKey(), row.Key()) { return db.Errorf(db.TransactionError, \u0026#34;query failed: row (%v): key does not match transaction key\u0026#34;, row) } 如果不需要短路(short-circuit)行为，可以直接提取布尔操作数：\n// Good: inTransaction := db.CurrentStatusIs(db.InTransaction) keysMatch := db.ValuesEqual(db.TransactionKey(), row.Key()) if inTransaction \u0026amp;\u0026amp; keysMatch { return db.Error(db.TransactionError, \u0026#34;query failed: row (%v): key does not match transaction key\u0026#34;, row) } 尤其注意，在条件已经重复的情况下，很可能还是有可以提取的局部变量：\n// Good: uid := user.GetUniqueUserID() if db.UserIsAdmin(uid) || db.UserHasPermission(uid, perms.ViewServerConfig) || db.UserHasPermission(uid, perms.CreateGroup) { // ... } // Bad: if db.UserIsAdmin(user.GetUniqueUserID()) || db.UserHasPermission(user.GetUniqueUserID(), perms.ViewServerConfig) || db.UserHasPermission(user.GetUniqueUserID(), perms.CreateGroup) { // ... } 包含闭包或多行结构文字的 if 语句应确保 大括号匹配 以避免 [缩进混淆] （https://google.github.io/styleguide/go/decisions#indentation-confusion）。\n// Good: if err := db.RunInTransaction(func(tx *db.TX) error { return tx.Execute(userUpdate, x, y, z) }); err != nil { return fmt.Errorf(\u0026#34;user update failed: %s\u0026#34;, err) } // Good: if _, err := client.Update(ctx, \u0026amp;upb.UserUpdateRequest{ ID: userID, User: user, }); err != nil { return fmt.Errorf(\u0026#34;user update failed: %s\u0026#34;, err) } 同样，不要尝试在 for 语句中人为的插入换行符。如果没有优雅的重构方式，是可以允许单纯的较长的行：\n// Good: for i, max := 0, collection.Size(); i \u0026lt; max \u0026amp;\u0026amp; !collection.HasPendingWriters(); i++ { // ... } 但是，通常可以优化为：\n// Good: for i, max := 0, collection.Size(); i \u0026lt; max; i++ { if collection.HasPendingWriters() { break } // ... } switch 和 case 语句都应始终保持在一行：\n// Good: switch good := db.TransactionStatus(); good { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting: // ... case db.TransactionCommitted, db.NoTransaction: // ... default: // ... } // Bad: switch bad := db.TransactionStatus(); bad { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting: // ... case db.TransactionCommitted, db.NoTransaction: // ... default: // ... } 如果行太长，将所有大小写缩进并用空行分隔以避免[缩进混淆]（https://google.github.io/styleguide/go/decisions#indentation-confusion）：\n// Good: switch db.TransactionStatus() { case db.TransactionStarting, db.TransactionActive, db.TransactionWaiting, db.TransactionCommitted: // ... case db.NoTransaction: // ... default: // ... } 在将变量比较的条件中，变量值放在等号运算符的左侧：\n// Good: if result == \u0026#34;foo\u0026#34; { // ... } 不要采用常量在前的表达含糊的写法(尤达条件式)\n// Bad: if \u0026#34;foo\u0026#34; == result { // ... } 复制 # 为了避免意外的别名和类似的错误，从另一个包复制结构时要小心。例如 sync.Mutex 是不能复制的同步对象。\nbytes.Buffer 类型包含一个 []byte 切片和切片可以引用的小数组，这是为了对小字符串的优化。如果你复制一个 Buffer，复制的切片会指向原始切片中的数组，从而在后续方法调用产生意外的效果。\n一般来说，如果类型的方法与指针类型*T相关联，不要复制类型为T的值。\n// Bad: b1 := bytes.Buffer{} b2 := b1 调用值接收者的方法可以隐藏拷贝。当你编写 API 时，如果你的结构包含不应复制的字段，你通常应该采用并返回指针类型。\n如此是可接受的:\n// Good: type Record struct { buf bytes.Buffer // other fields omitted } func New() *Record {...} func (r *Record) Process(...) {...} func Consumer(r *Record) {...} 但下面这种通常是错误的:\n// Bad: type Record struct { buf bytes.Buffer // other fields omitted } func (r Record) Process(...) {...} // Makes a copy of r.buf func Consumer(r Record) {...} // Makes a copy of r.buf 这一指南同样也适用于 sync.Mutex 复制的情况。\n不要 panic # 不要使用 panic 进行正常的错误处理。相反，使用 error 和多个返回值。请参阅 关于错误的有效 Go 部分。\n在 package main 和初始化代码中，考虑 log.Exit 中应该终止程序的错误（例如，无效配置 )，因为在许多这些情况下，堆栈跟踪对阅读者没有帮助。请注意 log.Exit 中调用了 os.Exit ，此时所有defer函数都将不会运行。\n对于那些表示“不可能”出现的条件错误、命名错误，应该在代码评审、测试期间发现，函数应合理地返回错误或调用 [log.Fatal](https://pkg.go.dev /github.com/golang/glog#Fatal）。\n注意： log.Fatalf 不是标准库日志。请参阅 [#logging]。\nMust类函数 # 用于在失败时停止程序的辅助函数应遵循命名约定“MustXYZ”（或“mustXYZ”）。一般来说，它们应该只在程序启动的早期被调用，而不是在像用户输入时，此时更应该首选 error 处理。\n这类方式，通常只在[包初始化时]（https://golang.org/ref/spec#Package_initialization）进行包级变量初始化的函数常见（例如template.Must 和 regexp.MustCompile)。\n// Good: func MustParse(version string) *Version { v, err := Parse(version) if err != nil { log.Fatalf(\u0026#34;MustParse(%q) = _, %v\u0026#34;, version, err) } return v } // Package level \u0026#34;constant\u0026#34;. If we wanted to use `Parse`, we would have had to // set the value in `init`. var DefaultVersion = MustParse(\u0026#34;1.2.3\u0026#34;) 相同的约定也可用于仅停止当前测试的情况（使用 t.Fatal）。这样在创建测试时通常很方便的，例如在 表驱动测试 的结构字段中，作为返回错误的函数是不能直接复制给结构字段的。\n// Good: func mustMarshalAny(t *testing.T, m proto.Message) *anypb.Any { t.Helper() any, err := anypb.New(m) if err != nil { t.Fatalf(\u0026#34;MustMarshalAny(t, m) = %v; want %v\u0026#34;, err, nil) } return any } func TestCreateObject(t *testing.T) { tests := []struct{ desc string data *anypb.Any }{ { desc: \u0026#34;my test case\u0026#34;, // Creating values directly within table driven test cases. data: mustMarshalAny(t, mypb.Object{}), }, // ... } // ... } 在这两种情况下，这种模式的价值在于可以在“值”上下文中调用。不应在难以确保捕获错误的地方或应检查错误的上下文中调用这些程序（如，在许多请求处理程序中）。对于常量输入，这允许测试确保“必须”的参数格式正确，对于非常量的输入，它允许测试验证错误是否正确处理或传播。\n在测试中使用 Must 函数的地方，通常应该 标记为测试辅助函数 并调用 t.Fatal（请参阅测试辅助函数中的错误处理来了解使用它的更多注意事项）。\n当有可能通过 普通错误处理 处理时，就不应该使用Must类函数：\n// Bad: func Version(o *servicepb.Object) (*version.Version, error) { // Return error instead of using Must functions. v := version.MustParse(o.GetVersionString()) return dealiasVersion(v) } Goroutine 生命周期 # 当你生成 goroutines 时，要明确它们何时或是否退出。\nGoroutines 可以在阻塞通道发送或接收出现泄漏。垃圾收集器不会终止一个 goroutine，即使它被阻塞的通道已经不可用。\n即使 goroutine 没有泄漏，在不再需要时仍处于运行状态也会导致其他微妙且难以诊断的问题。向已关闭的通道上发送会导致panic。\n// Bad: ch := make(chan int) ch \u0026lt;- 42 close(ch) ch \u0026lt;- 13 // panic “在结果已经不需要之后”修改仍在使用的入参可能会导致数据竞争。运行任意长时间的 goroutine 会导致不可预测的内存占用。\n并发代码的编写应该让 goroutine 生命周期非常明显。通常，这意味着在与同步相关的代码限制的函数范围内，将逻辑分解为 同步函数。如果并发性仍然不明显，那么文档说明 goroutine 在何时、为何退出就很重要。\n遵循上下文使用最佳实践的代码通常有助于明确这一点，其通常使用 context.Context 进行管理：\n// Good: func (w *Worker) Run(ctx context.Context) error { // ... for item := range w.q { // process 至少在ctx取消时会返回 go process(ctx, item) } // ... } 上面还有其他使用通道的情况，例如 chan struct{}、同步变量、条件变量 等等。重要的部分是 goroutine 的 结束对于后续维护者来说是显而易见的。\n相比之下，以下代码不关心其衍生的 goroutine 何时完成：\n// Bad: func (w *Worker) Run() { // ... for item := range w.q { // process returns when it finishes, if ever, possibly not cleanly // handling a state transition or termination of the Go program itself. go process(item) } // ... } 这段代码看起来还行，但有几个潜在的问题：\n该代码在生产中可能有未定义的行为，即使操作系统已经释放资源，程序也可能没有完全干净地结束 由于代码的不确定生命周期，代码难以进行有效的测试 代码可能会出现资源泄漏，如上所述 更多可阅读：\n永远不要在不知道它将如何停止的情况下启动 goroutine 重新思考经典并发模式：幻灯片，视频 Go 程序何时结束 接口 # Go 接口通常属于使用接口类型值的包，而不是实现接口类型的包。实现包应该返回具体的（通常是指针或结构）类型。这样就可以将新方法添加到实现中，而无需进行大量重构。有关详细信息，请参阅 GoTip #49：接受接口、返回具体类型。\n不要从使用 API 导出接口的 test double 实现。相反，应设计可以使用 实际实现 的公共API进行测试。有关详细信息，请参阅 GoTip #42：为测试编写存根。即使在使用实现不可行的情况下，也没有必要引入一个完全覆盖类型所有方法的接口；消费者可以创建一个只包含它需要的方法的接口，如 GoTip #78: Minimal Viable Interfaces 中所示。\n要测试使用 Stubby RPC 客户端的包，请使用真实的客户端连接。如果无法在测试中运行真实服务器，Google 的内部做法是使用内部 rpctest 包（即将推出！）获得与本地 [test double] 的真实客户端连接。\n在使用之前不要定义接口（参见 TotT: Code Health: Eliminate YAGNI Smells）。如果没有实际的使用示例，就很难判断一个接口是否必要，更不用说它应该包含哪些方法了。\n如果不需要传递不同的类型，则不要使用接口类型作为参数。\n不要导出不需要开放的接口。\nTODO: 写一个关于接口的更深入的文档并在这里链接到它。\n// Good: package consumer // consumer.go type Thinger interface { Thing() bool } func Foo(t Thinger) string { ... } // Good: package consumer // consumer_test.go type fakeThinger struct{ ... } func (t fakeThinger) Thing() bool { ... } ... if Foo(fakeThinger{...}) == \u0026#34;x\u0026#34; { ... } // Bad: package producer type Thinger interface { Thing() bool } type defaultThinger struct{ ... } func (t defaultThinger) Thing() bool { ... } func NewThinger() Thinger { return defaultThinger{ ... } } // Good: package producer type Thinger struct{ ... } func (t Thinger) Thing() bool { ... } func NewThinger() Thinger { return Thinger{ ... } } 泛型 # 在满足业务需求时，泛型（正式名称为“类型参数”）才应该被使用。在许多应用程序中，使用现有语言特性中传统方式（切片、映射、接口等）也可以正常工作，而不会增加复杂性，因此请注意不要过早使用。请参阅关于 最小机制 的讨论。\n在引入使用泛型的导出 API 时，请确保对其进行适当的记录。强烈鼓励包含可运行的 示例。\n不要仅仅因为你正在实现一个算法或不关心元素类型的数据结构而使用泛型。如果在实践中只有一种类型可以使用，那么首先让您的代码在该类型上工作，而不使用泛型。与其删除不必要的抽象，稍后为其添加多态将更简单。\n不要使用泛型来发明领域特定语言 (DSL)。特别是，不要引入可能会给阅读者带来沉重负担的错误处理框架。相反，更应该使用 错误处理 做法。对于测试，要特别小心引入 断言库 或框架，尤其是很少发现失败case的。\n一般来说：\n写代码，不要去设计类型。来自 Robert Griesemer 和 Ian Lance Taylor 的 GopherCon 演讲。 如果你有几种类型共享一个统一接口，请考虑使用该接口对解决方案进行建模。这种情况可能不需要泛型。 否则，不要依赖 any 类型和过多的 类型断言的情况，应考虑泛型。 更多也可以参考：\n在 Go 中使用泛型，Ian Lance Taylor 的演讲 Go 网页上的泛型教程 参数值传递 # 不要为了节省几个字节而将指针作为函数参数传递。如果一个函数在整个过程中只将参数x处理为*x，那么不应该采用指针。常见的例子包括传递一个指向字符串的指针（*string）或一个指向接口值的指针（*io.Reader）。在这两种情况下，值本身都是固定大小的，可以直接传递。\n此建议不适用于大型结构体，甚至可能会增加大小的小型结构。特别是，pb消息通常应该通过指针而不是值来处理。指针类型满足 proto.Message 接口（被 proto.Marshal、protocmp.Transform 等接受），并且协议缓冲区消息可能非常大，并且随着时间的推移通常会变得更大。\n接收者类型 # 方法接收者 和常规函数参数一样，也可以使用值或指针传递。选择哪个应该基于该方法应该属于哪个[方法集]（https://golang.org/ref/spec#Method_sets）。\n正确性胜过速度或简单性。 在某些情况下是必须使用指针的。在其他情况下，如果你对代码的增长方式没有很好的了解，请为大类型或考虑未来适用性上选择指针，并为简单的的数据使用值。\n下面的列表更详细地说明了每个案例：\n如果接收者是一个切片并且该方法没有重新切片或重新分配切片，应使用值而不是指针。\n// Good: type Buffer []byte func (b Buffer) Len() int { return len(b) } 如果方法需要修改接收者，应使用指针。\n// Good: type Counter int func (c *Counter) Inc() { *c++ } // See https://pkg.go.dev/container/heap. type Queue []Item func (q *Queue) Push(x Item) { *q = append([]Item{x}, *q...) } 如果接收者包含 不能被安全复制的 字段, 应使用指针接收者。常见的例子是 sync.Mutex 和其他同步类型。\n// Good: type Counter struct { mu sync.Mutex total int } func (c *Counter) Inc() { c.mu.Lock() defer c.mu.Unlock() c.total++ } 提示： 检查类型是否可被安全复制的相关信息可参考 Godoc。\n如果接收者是“大”结构或数组，则指针接收者可能更有效。传递结构相当于将其所有字段或元素作为参数传递给方法。如果这看起来太大而无法按值传递，那么指针是一个不错的选择。\n对于将调用修改接收者的其他函数，而这些修改对此方法不可见，请使用值类型； 否则使用指针。\n如果接收者是一个结构或数组，其元素中的任何一个都是指向可能发生变化的东西的指针，那么更应该指针接收者以使阅读者清楚地了解可变性的意图。\n// Good: type Counter struct { m *Metric } func (c *Counter) Inc() { c.m.Add(1) } 如果接收者是内置类型，例如整数或字符串，不需要修改，使用值。\n// Good: type User string func (u User) String() { return string(u) } 接收者是map, function 或 channel，使用值类型，而不是指针。\n// Good: // See https://pkg.go.dev/net/http#Header. type Header map[string][]string func (h Header) Add(key, value string) { /* omitted */ } 如果接收器是一个“小”数组或结构，它自然是一个没有可变字段和指针，那么值接收者通常是正确的选择。\n// Good: // See https://pkg.go.dev/time#Time. type Time struct { /* omitted */ } func (t Time) Add(d Duration) Time { /* omitted */ } 如有疑问，请使用指针接收者。\n作为一般准则，最好将类型的方法设为全部指针方法或全部值方法。\n注意： 关于是否值或指针的函数是否会影响性能，存在很多错误信息。编译器可以选择将指针传递到堆栈上的值以及复制堆栈上的值，但在大多数情况下，这些考虑不应超过代码的可读性和正确性。当性能确实很重要时，重要的是在确定一种方法优于另一种方法之前，用一个实际的基准来描述这两种方法。\nswitch 和 break # 不要在switch子句末尾使用没有目标标签的break语句； 它们是多余的。与 C 和 Java 不同，Go 中的 switch 子句会自动中断，并且需要 fallthrough 语句来实现 C 风格的行为。如果你想阐明空子句的目的，请使用注释而不是 break。\n// Good: switch x { case \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;: buf.WriteString(x) case \u0026#34;C\u0026#34;: // handled outside of the switch statement default: return fmt.Errorf(\u0026#34;unknown value: %q\u0026#34;, x) } // Bad: switch x { case \u0026#34;A\u0026#34;, \u0026#34;B\u0026#34;: buf.WriteString(x) break // this break is redundant case \u0026#34;C\u0026#34;: break // this break is redundant default: return fmt.Errorf(\u0026#34;unknown value: %q\u0026#34;, x) } Note: If a switch clause is within a for loop, using break within switch does not exit the enclosing for loop.\nfor { switch x { case \u0026#34;A\u0026#34;: break // exits the switch, not the loop } } To escape the enclosing loop, use a label on the for statement:\nloop: for { switch x { case \u0026#34;A\u0026#34;: break loop // exits the loop } } 同步函数 # 同步函数直接返回它们的结果，并在返回之前完成所有回调或通道操作。首选同步函数而不是异步函数。\n同步函数使 goroutine 在调用中保持本地化。这有助于推理它们的生命周期，并避免泄漏和数据竞争。同步函数也更容易测试，因为调用者可以传递输入并检查输出，而无需轮询或同步。\n如有必要，调用者可以通过在单独的 goroutine 中调用函数来添加并发性。然而，在调用方移除不必要的并发是相当困难的（有时是不可能的）。\n也可以看看：\n“重新思考经典并发模式”，Bryan Mills 的演讲：幻灯片，[视频](https://www.youtube.com/ 看？v=5zXAHh5tJqQ) 类型别名 # 使用类型定义，type T1 T2，定义一个新类型。 使用 类型别名, type T1 = T2 来引用现有类型而不定义新类型。 类型别名很少见； 它们的主要用途是帮助将包迁移到新的源代码位置。不要在不需要时使用类型别名。\n使用 %q # Go 的格式函数（fmt.Printf 等）有一个 %q 动词，它在双引号内打印字符串。\n// Good: fmt.Printf(\u0026#34;value %q looks like English text\u0026#34;, someText) 更应该使用 %q 而不是使用 %s 手动执行等效操作：\n// Bad: fmt.Printf(\u0026#34;value \\\u0026#34;%s\\\u0026#34; looks like English text\u0026#34;, someText) // Avoid manually wrapping strings with single-quotes too: fmt.Printf(\u0026#34;value \u0026#39;%s\u0026#39; looks like English text\u0026#34;, someText) 建议在供人使用的输出中使用 %q，其输入值可能为空或包含控制字符。可能很难注意到一个无声的空字符串，但是 \u0026quot;\u0026quot; 就这样清楚地突出了。\n使用 any # Go 1.18 将 any 类型作为 别名 引入到 interface{}。因为它是一个别名，所以 any 在许多情况下等同于 interface{}，而在其他情况下，它可以通过显式转换轻松互换。在新代码中应使用 any。\n通用库 # Flags # Google 代码库中的 Go 程序使用 标准 flag 包 的内部变体。它具有类似的接口，但与 Google 内部系统的互操作性很好。Go 二进制文件中的标志名称应该更应该使用下划线来分隔单词，尽管包含标志值的变量应该遵循标准的 Go 名称样式（混合大写字母）。具体来说，标志名称应该是蛇形命名，变量名称应该是驼峰命名。\n// Good: var ( pollInterval = flag.Duration(\u0026#34;poll_interval\u0026#34;, time.Minute, \u0026#34;Interval to use for polling.\u0026#34;) ) // Bad: var ( poll_interval = flag.Int(\u0026#34;pollIntervalSeconds\u0026#34;, 60, \u0026#34;Interval to use for polling in seconds.\u0026#34;) ) Flags只能在 package main 或等效项中定义。\n通用包应该使用 Go API 进行配置，而不是通过命令行界面进行配置；不要让导入库导出新标志作为副作用。也就是说，更倾向于显式的函数参数或结构字段分配，或者低频和严格审查的全局变量导出。在需要打破此规则的极少数情况下，标志名称必须清楚地表明它配置的包。\n如果你的标志是全局变量，在导入部分之后，将它们放在 var 组中。\n关于使用子命令创建 complex CLI 的最佳实践还有其他讨论。\n也可以看看：\n本周提示 #45：避免标记，尤其是在库代码中 Go Tip #10：配置结构和标志 Go Tip #80：依赖注入原则 日志 # Google 代码库中的 Go 程序使用 标准 log 包 的变体。它具有类似但功能更强大的interface，并且可以与 Google 内部系统进行良好的互操作。该库的开源版本可通过 package glog 获得，开源 Google 项目可能会使用它，但本指南指的是它始终作为“日志”。\n注意： 对于异常的程序退出，这个库使用 log.Fatal 通过堆栈跟踪中止，使用 log.Exit 在没有堆栈跟踪的情况下停止。标准库中没有 log.Panic 函数。\n提示： log.Info(v) 等价于 log.Infof(\u0026quot;%v\u0026quot;, v)，其他日志级别也是如此。当你没有格式化要做时，首选非格式化版本。\n也可以看看：\n记录错误 和 自定义详细日志级别 何时以及如何使用日志包停止程序 上下文 # context.Context 类型的值携带跨 API 和进程边界的安全凭证、跟踪信息、截止日期和取消信号。与 Google 代码库中使用线程本地存储的 C++ 和 Java 不同，Go 程序在整个函数调用链中显式地传递上下文，从传入的 RPC 和 HTTP 请求到传出请求。\n当传递给函数或方法时，context.Context 始终是第一个参数。\nfunc F(ctx context.Context /* other arguments */) {} 例外情况是：\n在 HTTP 处理程序中，上下文来自 req.Context()。\n在流式 RPC 方法中，上下文来自流。\n使用 gRPC 流的代码从生成的服务器类型中的 Context() 方法访问上下文，该方法实现了 grpc.ServerStream。请参阅 https://grpc.io/docs/languages/go/generated-code/。\n在入口函数（此类函数的示例见下文）中，使用 context.Background()。\n在二进制目标中：main 在通用代码和库中：init 在测试中：TestXXX、BenchmarkXXX、FuzzXXX 注意：调用链中间的代码很少需要使用 context.Background() 创建自己的基本上下文。更应该从调用者那里获取上下文，除非它是错误的上下文。\n你可能会遇到服务库（在 Google 的 Go 服务框架中实现 Stubby、gRPC 或 HTTP），它们为每个请求构建一个新的上下文对象。这些上下文立即填充来自传入请求的信息，因此当传递给请求处理程序时，上下文的附加值已从客户端调用者通过网络边界传播给它。此外，这些上下文的生命周期仅限于请求的生命周期：当请求完成时，上下文将被取消。\n除非你正在实现一个服务器框架，否则你不应该在库代码中使用 context.Background() 创建上下文。相反，如果有可用的现有上下文，则更应该使用下面提到的上下文分离。如果你认为在入口点函数之外确实需要context.Background()，请在提交实现之前与 Google Go 风格的邮件列表讨论它。\ncontext.Context 在函数中首先出现的约定也适用于测试辅助函数。\n// Good: func readTestFile(ctx context.Context, t *testing.T, path string) string {} 不要将上下文成员添加到结构类型。相反，为需要传递它的类型的每个方法添加一个上下文参数。一个例外是其签名必须与标准库或 Google 无法控制的第三方库中的接口匹配的方法。这种情况非常罕见，应该在实施和可读性审查之前与 Google Go 风格的邮件列表讨论。\nGoogle 代码库中必须产生可以在取消父上下文后运行的后台操作的代码可以使用内部包进行分离。关注 https://github.com/golang/go/issues/40221 讨论开源替代方案。\n由于上下文是不可变的，因此可以将相同的上下文传递给共享相同截止日期、取消信号、凭据、父跟踪等的多个调用。\n更多参见：\n上下文和结构 自定义上下文 # 不要在函数签名中创建自定义上下文类型或使用上下文以外的接口。这条规定没有例外。\n想象一下，如果每个团队都有一个自定义上下文。对于包 P 和 Q 的所有对，从包 P 到包 Q 的每个函数调用都必须确定如何将“PContext”转换为“QContext”。这对开发者来说是不切实际且容易出错的，并且它会进行自动重构 添加上下文参数几乎是不可能的。\n如果你要传递应用程序数据，请将其放入参数、接收器、全局变量中，或者如果它确实属于那里，则放入 Context 值中。创建自己的 Context 类型是不可接受的，因为它破坏了 Go 团队使 Go 程序在生产中正常工作的能力。\ncrypto/rand # 不要使用包 math/rand 来生成密钥，即使是一次性的。如果未生成随机种子，则生成器是完全可预测的。用time.Nanoseconds()生成种子，也只有几位熵。相反，请使用 crypto/rand ，如果需要文本，请打印为十六进制或 base64。\n// Good: import ( \u0026#34;crypto/rand\u0026#34; // \u0026#34;encoding/base64\u0026#34; // \u0026#34;encoding/hex\u0026#34; \u0026#34;fmt\u0026#34; // ... ) func Key() string { buf := make([]byte, 16) if _, err := rand.Read(buf); err != nil { log.Fatalf(\u0026#34;Out of randomness, should never happen: %v\u0026#34;, err) } return fmt.Sprintf(\u0026#34;%x\u0026#34;, buf) // or hex.EncodeToString(buf) // or base64.StdEncoding.EncodeToString(buf) } 有用的测试失败 # 应该可以在不读取测试代码的情况下诊断测试失败。测试失败应当显示详细有用的消息说明：\n是什么导致了失败 哪些输入导致错误 实际结果 预期的结果 下面概述了实现这一目标的具体约定。\n断言库 # 不要创建“断言库”作为测试辅助函数。\n断言库是试图在测试中结合验证和生成失败消息的库（尽管同样的陷阱也可能适用于其他测试辅助函数）。有关测试辅助函数和断言库之间区别的更多信息，请参阅 最佳实践。\n// Bad: var obj BlogPost assert.IsNotNil(t, \u0026#34;obj\u0026#34;, obj) assert.StringEq(t, \u0026#34;obj.Type\u0026#34;, obj.Type, \u0026#34;blogPost\u0026#34;) assert.IntEq(t, \u0026#34;obj.Comments\u0026#34;, obj.Comments, 2) assert.StringNotEq(t, \u0026#34;obj.Body\u0026#34;, obj.Body, \u0026#34;\u0026#34;) 断言库倾向于提前停止测试（如果 assert 调用 t.Fatalf 或 panic）或省略有关测试正确的相关信息：\n// Bad: package assert func IsNotNil(t *testing.T, name string, val interface{}) { if val == nil { t.Fatalf(\u0026#34;data %s = nil, want not nil\u0026#34;, name) } } func StringEq(t *testing.T, name, got, want string) { if got != want { t.Fatalf(\u0026#34;data %s = %q, want %q\u0026#34;, name, got, want) } } 复杂的断言函数通常不提供 有用的失败消息 和存在于测试函数中的上下文。太多的断言函数和库会导致开发人员体验支离破碎：我应该使用哪个断言库，它应该发出什么样的输出格式等问题？ 碎片化会产生不必要的混乱，特别是对于负责修复潜在下游破坏的库维护者和大规模更改的作者。与其创建用于测试的特定领域语言，不如使用 Go 本身。\n断言库通常会排除比较和相等检查。更应该使用标准库，例如 cmp 和 fmt 修改为：\n// Good: var got BlogPost want := BlogPost{ Comments: 2, Body: \u0026#34;Hello, world!\u0026#34;, } if !cmp.Equal(got, want) { t.Errorf(\u0026#34;blog post = %v, want = %v\u0026#34;, got, want) } 对于更多特定于域的比较助手，更应该返回一个可以在测试失败消息中使用的值或错误，而不是传递 *testing.T 并调用其错误报告方法：\n// Good: func postLength(p BlogPost) int { return len(p.Body) } func TestBlogPost_VeritableRant(t *testing.T) { post := BlogPost{Body: \u0026#34;I am Gunnery Sergeant Hartman, your senior drill instructor.\u0026#34;} if got, want := postLength(post), 60; got != want { t.Errorf(\u0026#34;length of post = %v, want %v\u0026#34;, got, want) } } 最佳实践： 如果 postLength 很重要，直接测试它是有意义的，独立于调用它的其他函数测试。\n也可以看看：\n等值比较和差异 打印差异 有关测试辅助函数和断言助手之间区别的更多信息，请参阅最佳实践 标识出方法 # 在大多数测试中，失败消息应该包括失败的函数的名称，即使从测试函数的名称中看起来很明显。具体来说，你的失败信息应该是 YourFunc(%v) = %v, want %v 而不仅仅是 got %v, want %v。\n标识出输入 # 在大多数测试中，失败消息应该包括功能输入（如果它们很短）。如果输入的相关属性不明显（例如，因为输入很大或不透明），你应该使用对正在测试的内容的描述来命名测试用例，并将描述作为错误消息的一部分打印出来。\nGot before want # 测试输出应包括函数在打印预期值之前返回的实际值。打印测试输出的标准格式是 YourFunc(%v) = %v, want %v。在你会写“实际”和“预期”的地方，更应该分别使用“get”和“want”这两个词。\n对于差异，方向性不太明显，因此包含一个有助于解释失败的关键是很重要的。请参阅 关于打印差异的部分。无论你在失败消息中使用哪种 diff 顺序，都应将其明确指示为失败消息的一部分，因为现有代码的顺序不一致。\n全结构比较 # 如果你的函数返回一个结构体（或任何具有多个字段的数据类型，例如切片、数组和映射），请避免编写执行手动编码的结构体逐个字段比较的测试代码。相反，构建期望函数返回的数据，并使用 深度比较 直接进行比较。\n注意： 如果你的数据包含模糊测试意图的不相关字段，则这不适用。\n如果你的结构比较时需要近似相等（或等效类型的语义），或者它包含无法比较相等的字段（例如，如果其中一个字段是 io.Reader），请调整 cmp. Diff 或 cmp.Equal 与 cmpopts 选项比较，例如cmpopts.IgnoreInterfaces 可能满足你的需求（示例)。\n如果你的函数返回多个返回值，则无需在比较它们之前将它们包装在结构中。只需单独比较返回值并打印它们。\n// Good: val, multi, tail, err := strconv.UnquoteChar(`\\\u0026#34;Fran \u0026amp; Freddie\u0026#39;s Diner\\\u0026#34;`, \u0026#39;\u0026#34;\u0026#39;) if err != nil { t.Fatalf(...) } if val != `\u0026#34;` { t.Errorf(...) } if multi { t.Errorf(...) } if tail != `Fran \u0026amp; Freddie\u0026#39;s Diner\u0026#34;` { t.Errorf(...) } 比较稳定的结果 # 避免比较那些可能依赖于非自有包输出稳定性的结果。相反，测试应该在语义相关的信息上进行比较，这些信息是稳定的，并能抵抗依赖关系的变化。对于返回格式化字符串或序列化字节的功能，一般来说，假设输出是稳定的是不安全的。\n例如，json.Marshal可以改变（并且在过去已经改变）它所输出的特定字节。如果json包改变了它序列化字节的方式，在JSON字符串上执行字符串相等的测试可能会中断。相反，一个更强大的测试将解析JSON字符串的内容，并确保它在语义上等同于一些预期的数据结构。\n测试继续进行 # 测试应该尽可能地持续下去，即使是在失败之后，以便在一次运行中打印出所有的失败检查。这样一来，正在修复失败测试的开发人员就不必在修复每个错误后重新运行测试来寻找下一个错误。\n更倾向于调用t.Error而不是t.Fatal来报告不匹配。当比较一个函数输出的几个不同属性时，对每一个比较都使用t.Error。\n调用t.Fatal主要用于报告一个意外的错误情况，当后续的比较失败是没有意义的。\n对于表驱动的测试，考虑使用子测试，使用t.Fatal而不是t.Error和continue。参见[GoTip #25: Subtests: Making Your Tests Lean]（https://google.github.io/styleguide/go/index.html#gotip）。\n**最佳实践：**关于何时应使用t.Fatal的更多讨论，见最佳实践。\n等值比较和差异 # ==操作符使用语言定义的比较来评估相等性。标量值(数字、布尔运算等)根据其值进行比较, 但只有一些结构和接口可以用这种方式进行比较。指针的比较是基于它们是否指向同一个变量，而不是基于它们所指向的值是否相等。\n对于类似切片这种情况下，==是不能正确处理比较的，cmp包则可以用于比较更复杂的数据结构。使用cmp.Equal进行等价比较，使用cmp.Diff获得对象之间可供人类阅读的差异。\n// Good: want := \u0026amp;Doc{ Type: \u0026#34;blogPost\u0026#34;, Comments: 2, Body: \u0026#34;This is the post body.\u0026#34;, Authors: []string{\u0026#34;isaac\u0026#34;, \u0026#34;albert\u0026#34;, \u0026#34;emmy\u0026#34;}, } if !cmp.Equal(got, want) { t.Errorf(\u0026#34;AddPost() = %+v, want %+v\u0026#34;, got, want) } 作为一个通用的比较库，cmp可能不知道如何比较某些类型。例如，它只能在传递protocmp.Transform选项时比较protobuf的信息。\n// Good: if diff := cmp.Diff(want, got, protocmp.Transform()); diff != \u0026#34;\u0026#34; { t.Errorf(\u0026#34;Foo() returned unexpected difference in protobuf messages (-want +got):\\n%s\u0026#34;, diff) } 虽然cmp包不是Go标准库的一部分，但它是由Go团队维护的，随着时间的推移应该会产生稳定的相等结果。它是用户可配置的，应该可以满足大多数的比较需求。\n现有的代码可能会使用以下旧的库，为了保持一致性，可以继续使用它们。\npretty产生美观的差异报告。然而，它非常谨慎地认为具有相同视觉表现的数值是相等的。特别注意，pretty不区分nil切片和空切片之间的差异，对具有相同字段的不同接口实现也不敏感，而且有可能使用嵌套图作为与结构值比较的基础。在产生差异之前，它还会将整个值序列化为一个字符串，因此对于比较大的值来说不是一个好的选择。默认情况下，它比较的是未导出的字段，这使得它对你的依赖关系中实现细节的变化很敏感。由于这个原因，在protobuf信息上使用pretty是不合适的。 在新的代码中更倾向于使用cmp，值得考虑更新旧的代码，在实际可行的情况下使用cmp。\n旧的代码可以使用标准库中的reflect.DeepEqual函数来比较复杂的结构。reflect.DeepEqual不应该被用来检查等值比较，因为它对未导出的字段和其他实现细节的变化很敏感。使用reflect.DeepEqual的代码应该更新为上述库之一。\n注意： cmp包是为测试而设计的，而不是用于生产。因此，当它怀疑一个比较被错误地执行时，它可能会 panic ，以向用户提供如何改进测试的指导，使其不那么脆弱。鉴于cmp的恐慌倾向，它不适合在生产中使用的代码，因为虚假的panic可能是致命的。\n详细程度 # 传统的失败信息，适用于大多数Go测试，是YourFunc(%v) = %v, want %v。然而，有些情况可能需要更多或更少的细节。\n进行复杂交互的测试也应该描述交互。例如，如果同一个YourFunc被调用了好几次，那么要确定哪个调用未通过测试。如果知道系统的任何额外状态是很重要的，那么在失败输出中应包括这些（或者至少在日志中）。 如果数据是一个复杂的结构，在消息中只描述重要的部分是可以接受的，但不要过分掩盖数据。 设置失败不需要同样水平的细节。如果一个测试辅助函数填充了一个Spanner表，但Spanner却坏了，你可能不需要包括你要存储在数据库中的测试输入。t.Fatalf(\u0026quot;Setup: Failed to set up test database: %s\u0026quot;, err)通常足以解决这个问题。 **提示：**应该在开发过程中触发失败。审查失败信息是什么样子的，维护者是否能有效地处理失败。\n有一些技术可以清晰地再现测试输入和输出：\n当打印字符串数据时，%q通常是有用的以强调该值的重要性，并更容易发现坏值。 当打印（小）结构时，%+v可能比%v更有用。 当验证较大的值失败时，打印差异可以使人们更容易理解失败的原因。 打印差异 # 如果你的函数返回较大的输出，那么当你的测试失败时，阅读失败信息的人很难发现其中的差异。与其同时打印返回值和想要的值，不如做一个差异。\n为了计算这些值的差异，cmp.Diff是首选，特别是对于新的测试和新的代码，但也可以使用其他工具。关于每个函数的优点和缺点的指导，见类型的等值。\ncmp.Diff pretty.Compare 你可以使用diff包来比较多行字符串或字符串的列表。你可以把它作为其他类型的比较的构建块。\n在失败信息中添加一些文字，解释差异的方向。\n当你使用cmp，pretty和diff包时，类似diff (-want +got)的东西很好（如果把(want, got)传递给函数），因为你添加到格式字符串中的-和+将与实际出现在diff行开头的-和+匹配。如果把(got, want)传给函数，正确的键将是(-got +want)。 messagediff包使用不同的输出格式，所以当你使用它时，diff (want -\u0026gt; got)的信息是合适的（如果把(want, got)传给函数），因为箭头的方向将与 \u0026ldquo;修改 \u0026ldquo;行中箭头的方向一致。 差异将跨越多行，所以应该在打印差异之前打印一个新行。\n测试错误语义 # 当一个单元测试执行字符串比较或使用 cmp 来检查特定的输入是否返回特定种类的错误时，你可能会发现，如果这些错误信息在将来被重新修改，你的测试就会很脆弱。因为这有可能将你的单元测试变成一个变化检测器（参见TotT: Change-Detector Tests Considered Harmful），不要使用字符串比较来检查你的函数返回什么类型的错误。然而，允许使用字符串比较来检查来自被测包的错误信息是否满足某些属性，例如，它是否包括参数名称。\nGo中的错误值通常有一个用于人眼的部分和一个用于语义控制流的部分。测试应该力求只测试可以可靠观察到的语义信息，而不是显示用于人类调试的信息，因为这往往会在未来发生变化。关于构建具有语义的错误的指导，请参见关于错误的最佳实践。如果语义信息不充分的错误来自于你无法控制的依赖关系，请考虑针对所有者提交一个错误，以帮助改进API，而不是依靠解析错误信息。\n在单元测试中，通常只关心错误是否发生。如果是这样，那么在你预期发生错误时，只测试错误是否为非零就足够了。如果你想测试错误在语义上与其他错误相匹配，那么可以考虑使用cmp与cmpopts.EquateErrors。\n**注意：**如果一个测试使用了cmpopts.EquateErrors，但是它所有的wantErr值都是nil或者cmpopts.AnyError，那么使用cmp是不必要的。简化代码，使want字段改为bool类型，然后就可以用！=进行简单的比较。\n// Good: gotErr := f(test.input) != nil if gotErr != test.wantErr { t.Errorf(\u0026#34;f(%q) returned err = %v, want error presence = %v\u0026#34;, test.input, gotErr, test.wantErr) } 另请参阅 GoTip #13：设计用于检查的错误。\n测试结构 # 子测试 # 标准的 Go 测试库提供了一种工具来 定义子测试。这允许在设置和清理、控制并行性和测试过滤方面具有灵活性。子测试可能很有用（特别是对于表驱动测试），但使用它们不是强制性的。另请参阅 https://blog.golang.org/subtests。\n子测试不应该依赖于其他case的执行来获得成功或初始状态，因为子测试应该能够使用 go test -run 标志或使用 Bazel 测试过滤器 表达式。\n子测试名称 # 命名子测试，使其在测试输出中可读，并且在命令行上对测试过滤的用户有用。当你使用“t.Run”创建子测试时，第一个参数用作测试的描述性名称。为了确保测试结果对于阅读日志的人来说是清晰的，请选择在转义后仍然有用且可读的子测试名称。将子测试名称视为函数标识符而不是散文描述。测试运行程序用下划线替换空格，并转义非打印字符。如果你的测试数据受益于更长的描述，请考虑将描述放在单独的字段中（可能使用“t.Log”或与失败消息一起打印）。\n可以使用 Go 测试运行器 或 Bazel 测试过滤器 的标志单独运行子测试，选择易于输入的描述性名称。\n**警告：**斜杠字符在子测试名称中特别不友好，因为它们具有[测试过滤器的特殊含义](https://blog.golang.org/subtests#:~:text=Perhaps 一位匹配任何测试）。\n# Bad: # Assuming TestTime and t.Run(\u0026#34;America/New_York\u0026#34;, ...) bazel test :mytest --test_filter=\u0026#34;Time/New_York\u0026#34; # Runs nothing! bazel test :mytest --test_filter=\u0026#34;Time//New_York\u0026#34; # Correct, but awkward. 要识别函数的输入，将它们包含在测试的失败消息中，它们不会被测试执行者所忽略。\n// Good: func TestTranslate(t *testing.T) { data := []struct { name, desc, srcLang, dstLang, srcText, wantDstText string }{ { name: \u0026#34;hu=en_bug-1234\u0026#34;, desc: \u0026#34;regression test following bug 1234. contact: cleese\u0026#34;, srcLang: \u0026#34;hu\u0026#34;, srcText: \u0026#34;cigarettát és egy öngyújtót kérek\u0026#34;, dstLang: \u0026#34;en\u0026#34;, wantDstText: \u0026#34;cigarettes and a lighter please\u0026#34;, }, // ... } for _, d := range data { t.Run(d.name, func(t *testing.T) { got := Translate(d.srcLang, d.dstLang, d.srcText) if got != d.wantDstText { t.Errorf(\u0026#34;%s\\nTranslate(%q, %q, %q) = %q, want %q\u0026#34;, d.desc, d.srcLang, d.dstLang, d.srcText, got, d.wantDstText) } }) } } 以下是一些要避免的事情的例子：\n// Bad: // Too wordy. t.Run(\u0026#34;check that there is no mention of scratched records or hovercrafts\u0026#34;, ...) // Slashes cause problems on the command line. t.Run(\u0026#34;AM/PM confusion\u0026#34;, ...) 表驱动测试 # 当许多不同的测试用例可以使用相似的测试逻辑进行测试时，使用表驱动测试。\n测试函数的实际输出是否等于预期输出时。例如，许多 fmt.Sprintf 的测试 或下面的最小片段。 测试函数的输出是否始终符合同一组不变量时。例如，测试 net.Dial。 这是从标准“字符串”库复制的表驱动测试的最小结构。如果需要，你可以使用不同的名称，将测试切片移动到测试函数中，或者添加额外的工具，例如子测试或设置和清理函数。始终牢记有用的测试失败。\n// Good: var compareTests = []struct { a, b string i int }{ {\u0026#34;\u0026#34;, \u0026#34;\u0026#34;, 0}, {\u0026#34;a\u0026#34;, \u0026#34;\u0026#34;, 1}, {\u0026#34;\u0026#34;, \u0026#34;a\u0026#34;, -1}, {\u0026#34;abc\u0026#34;, \u0026#34;abc\u0026#34;, 0}, {\u0026#34;ab\u0026#34;, \u0026#34;abc\u0026#34;, -1}, {\u0026#34;abc\u0026#34;, \u0026#34;ab\u0026#34;, 1}, {\u0026#34;x\u0026#34;, \u0026#34;ab\u0026#34;, 1}, {\u0026#34;ab\u0026#34;, \u0026#34;x\u0026#34;, -1}, {\u0026#34;x\u0026#34;, \u0026#34;a\u0026#34;, 1}, {\u0026#34;b\u0026#34;, \u0026#34;x\u0026#34;, -1}, // test runtime·memeq\u0026#39;s chunked implementation {\u0026#34;abcdefgh\u0026#34;, \u0026#34;abcdefgh\u0026#34;, 0}, {\u0026#34;abcdefghi\u0026#34;, \u0026#34;abcdefghi\u0026#34;, 0}, {\u0026#34;abcdefghi\u0026#34;, \u0026#34;abcdefghj\u0026#34;, -1}, } func TestCompare(t *testing.T) { for _, tt := range compareTests { cmp := Compare(tt.a, tt.b) if cmp != tt.i { t.Errorf(`Compare(%q, %q) = %v`, tt.a, tt.b, cmp) } } } 注意：上面这个例子中的失败消息满足了识别函数和识别输入。无需用数字标识行。\n当需要使用与其他测试用例不同的逻辑来检查某些测试用例时，编写多个测试函数更为合适，如 GoTip #50: Disjoint Table Tests。当表中的每个条目都有自己不同的条件逻辑来检查每个输出的输入时，测试代码的逻辑可能会变得难以理解。如果测试用例具有不同的逻辑但设置相同，则单个测试函数中的一系列子测试 可能有意义。\n你可以将表驱动测试与多个测试函数结合起来。例如，当测试函数的输出与预期输出完全匹配并且函数为无效输入返回非零错误时，编写两个单独的表驱动测试函数是最好的方法：一个用于正常的非错误输出，一个用于错误输出。\n数据驱动的测试用例 # 表测试行有时会变得复杂，行值指示测试用例内的条件行为。测试用例之间重复的额外清晰度对于可读性是必要的。\n// Good: type decodeCase struct { name string input string output string err error } func TestDecode(t *testing.T) { // setupCodex is slow as it creates a real Codex for the test. codex := setupCodex(t) var tests []decodeCase // rows omitted for brevity for _, test := range tests { t.Run(test.name, func(t *testing.T) { output, err := Decode(test.input, codex) if got, want := output, test.output; got != want { t.Errorf(\u0026#34;Decode(%q) = %v, want %v\u0026#34;, test.input, got, want) } if got, want := err, test.err; !cmp.Equal(got, want) { t.Errorf(\u0026#34;Decode(%q) err %q, want %q\u0026#34;, test.input, got, want) } }) } } func TestDecodeWithFake(t *testing.T) { // A fakeCodex is a fast approximation of a real Codex. codex := newFakeCodex() var tests []decodeCase // rows omitted for brevity for _, test := range tests { t.Run(test.name, func(t *testing.T) { output, err := Decode(test.input, codex) if got, want := output, test.output; got != want { t.Errorf(\u0026#34;Decode(%q) = %v, want %v\u0026#34;, test.input, got, want) } if got, want := err, test.err; !cmp.Equal(got, want) { t.Errorf(\u0026#34;Decode(%q) err %q, want %q\u0026#34;, test.input, got, want) } }) } } 在下面的反例中，请注意在case设置中区分每个测试案例使用哪种类型的 Codex 是多么困难。（突出显示的部分与 TotT：数据驱动陷阱！ 的建议相冲突。）\n// Bad: type decodeCase struct { name string input string codex testCodex output string err error } type testCodex int const ( fake testCodex = iota prod ) func TestDecode(t *testing.T) { var tests []decodeCase // rows omitted for brevity for _, test := tests { t.Run(test.name, func(t *testing.T) { var codex Codex switch test.codex { case fake: codex = newFakeCodex() case prod: codex = setupCodex(t) default: t.Fatalf(\u0026#34;unknown codex type: %v\u0026#34;, codex) } output, err := Decode(test.input, codex) if got, want := output, test.output; got != want { t.Errorf(\u0026#34;Decode(%q) = %q, want %q\u0026#34;, test.input, got, want) } if got, want := err, test.err; !cmp.Equal(got, want) { t.Errorf(\u0026#34;Decode(%q) err %q, want %q\u0026#34;, test.input, got, want) } }) } } 标识行 # 不要使用测试表中的测试索引来代替命名测试或打印输入。没有人愿意通过你的测试表并计算条目以找出哪个测试用例失败。\n// Bad: tests := []struct { input, want string }{ {\u0026#34;hello\u0026#34;, \u0026#34;HELLO\u0026#34;}, {\u0026#34;wORld\u0026#34;, \u0026#34;WORLD\u0026#34;}, } for i, d := range tests { if strings.ToUpper(d.input) != d.want { t.Errorf(\u0026#34;failed on case #%d\u0026#34;, i) } } 在你的测试结构中添加测试描述，并将其与失败信息一起打印。当使用子测试时，你的子测试名称应能有效识别行。\n**重要的是：**即使t.Run对输出和执行有一定的范围，你必须始终识别输入。表的测试行名称必须遵循子测试命名的指导。\n测试辅助函数 # 一个测试辅助函数是一个执行设置或清理任务的函数。所有发生在测试辅助函数中的故障都被认为是环境的故障（而不是被测代码的故障）\u0026ndash;例如，当一个测试数据库不能被启动，因为在这台机器上没有更多的空闲端口。\n如果你传递一个*testing.T，调用t.Helper，将测试辅助函数中的故障归结到调用助手的那一行。这个参数应该在context参数之后，如果有的话，在任何其他参数之前。\n// Good: func TestSomeFunction(t *testing.T) { golden := readFile(t, \u0026#34;testdata/golden-result.txt\u0026#34;) // ... tests against golden ... } // readFile returns the contents of a data file. // It must only be called from the same goroutine as started the test. func readFile(t *testing.T, filename string) string { t.Helper() contents, err := runfiles.ReadFile(filename) if err != nil { t.Fatal(err) } return string(contents) } 当这种模式掩盖了测试失败和导致失败的条件之间的联系时，请不要使用这种模式。具体来说，关于断言库的指导仍然适用，t.Helper不应该被用来实现这种库。\n**提示：**更多关于测试辅助函数和断言助手的区别，请参见最佳实践。\n虽然上面提到的是*testing.T，但大部分建议对基准和模糊帮助器来说都是一样的。\n测试包 # 同一包内的测试 # 测试可以和被测试的代码定义在同一个包里。\n要在同一个包中编写测试\n将测试放在一个foo_test.go文件中 在测试文件中使用package foo。 不要明确地导入要测试的包 # Good: go_library( name = \u0026#34;foo\u0026#34;, srcs = [\u0026#34;foo.go\u0026#34;], deps = [ ... ], ) go_test( name = \u0026#34;foo_test\u0026#34;, size = \u0026#34;small\u0026#34;, srcs = [\u0026#34;foo_test.go\u0026#34;], library = \u0026#34;:foo\u0026#34;, deps = [ ... ], ) 同一个包中的测试可以访问包中未导出的标识符。这可以实现更好的测试覆盖率和更简洁的测试。注意在测试中声明的任何examples都不会有用户在他们的代码中需要的包名。\n不同包中的测试 # 将测试定义在与被测代码相同的包中并不总是合适的，甚至不可能。在这种情况下，使用一个带有_test后缀的包名。这是对包名的 \u0026ldquo;不使用下划线\u0026quot;规则的一个例外。比如说。\n如果一个集成测试没有一个它明显属于的库\n// Good: package gmailintegration_test import \u0026#34;testing\u0026#34; 如果在同一软件包中定义测试会导致循环依赖性\n// Good: package fireworks_test import ( \u0026#34;fireworks\u0026#34; \u0026#34;fireworkstestutil\u0026#34; // fireworkstestutil also imports fireworks ) 使用testing包 # Go标准库提供了testing包。这是Google代码库中唯一允许用于Go代码的测试框架。特别是断言库和第三方测试框架是不允许的。\ntesting包为编写好的测试提供了最小但完整的功能集。\n顶层测试 基准 可运行的例子 子测试 记录 失败和致命的失败 这些设计是为了与核心语言特性如复合字面和带有初始化的if语句语法协同工作，使测试作者能够编写[清晰、可读、可维护的测试]。\n非决策性的 # 风格指南不能列举所有事项的正面规定，也不能列举所有它不提供意见的事项。也就是说，这里有几件可读性社区以前争论过但没有达成共识的事情。\n零值的局部变量初始化。var i int和i := 0是等同的。参见初始化最佳实践。 空的复合字面与new或make。\u0026amp;File{}和new(File)是等同的。map[string]bool{}和make(map[string]bool)也是如此。参见复合声明最佳实践。 got/want参数在cmp.Diff调用中的排序。要有本地一致性，并在你的失败信息中包括一个图例。 errors.New与fmt.Errorf在非格式化字符串上的对比。errors.New(\u0026quot;foo\u0026quot;)和fmt.Errorf(\u0026quot;foo\u0026quot;)可以互换使用。 如果有特殊情况，它们又出现了，可读性导师可能会做一个可选的注释，但一般来说，作者可以自由选择他们在特定情况下喜欢的风格。\n当然，如果风格指南中没有涉及的东西确实需要更多的讨论，欢迎在具体的审查中，或者在内部留言板上提出来。\n"}]